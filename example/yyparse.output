Terminals unused in grammar

   TOK_BLOCK
   TOK_CALL
   TOK_IFELSE
   TOK_INITDECL
   TOK_POS
   TOK_NEG
   TOK_NEWARRAY
   TOK_TYPEID
   TOK_FIELD
   TOK_ROOT
   TOK_DECLID
   TOK_INDEX
   TOK_NEWSTRING
   TOK_RETURNVOID
   TOK_VARDECL
   TOK_FUNCTION
   TOK_PARAMLIST
   TOK_PROTOTYPE


Grammar

    0 $accept: start $end

    1 start: program

    2 program: program structdef
    3        | program function
    4        | program statement
    5        | program error '}'
    6        | program error ';'
    7        | /* empty */

    8 structhead: '{' fielddecl
    9           | structhead fielddecl

   10 structdef: TOK_STRUCT TOK_IDENT structhead '}'
   11          | TOK_STRUCT TOK_IDENT '{' '}'

   12 fielddecl: basetype TOK_IDENT ';'
   13          | basetype TOK_ARRAY TOK_IDENT ';'

   14 basetype: TOK_VOID
   15         | TOK_BOOL
   16         | TOK_CHAR
   17         | TOK_INT
   18         | TOK_STRING
   19         | TOK_IDENT

   20 funchead: '(' identdecl
   21         | funchead ',' identdecl

   22 function: identdecl funchead ')' block
   23         | identdecl funchead ')' ';'
   24         | identdecl '(' ')' block
   25         | identdecl '(' ')' ';'

   26 identdecl: basetype TOK_IDENT
   27          | basetype TOK_ARRAY TOK_IDENT

   28 blockhead: blockhead statement
   29          | '{' statement

   30 block: blockhead '}'
   31      | '{' '}'

   32 statement: block
   33          | vardecl
   34          | while
   35          | ifelse
   36          | return
   37          | expr ';'
   38          | ';'

   39 vardecl: identdecl '=' expr ';'

   40 while: TOK_WHILE '(' expr ')' statement

   41 ifelse: TOK_IF '(' expr ')' statement TOK_ELSE statement
   42       | TOK_IF '(' expr ')' statement

   43 return: TOK_RETURN ';'
   44       | TOK_RETURN expr ';'

   45 expr: binop
   46     | unop
   47     | allocator
   48     | call
   49     | '(' expr ')'
   50     | variable
   51     | constant

   52 binop: expr '+' expr
   53      | expr '-' expr
   54      | expr '*' expr
   55      | expr '/' expr
   56      | expr TOK_LT expr
   57      | expr TOK_GT expr
   58      | expr TOK_LE expr
   59      | expr TOK_GE expr
   60      | expr '=' expr
   61      | expr TOK_EQ expr
   62      | expr TOK_NE expr
   63      | expr '%' expr

   64 unop: '+' expr
   65     | '-' expr
   66     | '!' expr
   67     | TOK_CHR expr
   68     | TOK_ORD expr

   69 allocator: TOK_NEW TOK_IDENT '(' ')'
   70          | TOK_NEW TOK_STRING '(' expr ')'
   71          | TOK_NEW basetype '[' expr ']'

   72 callexprs: TOK_IDENT '(' expr
   73          | callexprs ',' expr

   74 call: callexprs ')'
   75     | TOK_IDENT '(' ')'

   76 variable: TOK_IDENT
   77         | expr '[' expr ']'
   78         | expr '.' TOK_IDENT

   79 constant: TOK_INTCON
   80         | TOK_CHARCON
   81         | TOK_STRINGCON
   82         | TOK_FALSE
   83         | TOK_TRUE
   84         | TOK_NULL


Terminals, with rules where they appear

$end (0) 0
'!' (33) 66
'%' (37) 63
'(' (40) 20 24 25 40 41 42 49 69 70 72 75
')' (41) 22 23 24 25 40 41 42 49 69 70 74 75
'*' (42) 54
'+' (43) 52 64
',' (44) 21 73
'-' (45) 53 65
'.' (46) 78
'/' (47) 55
';' (59) 6 12 13 23 25 37 38 39 43 44
'=' (61) 39 60
'[' (91) 71 77
']' (93) 71 77
'{' (123) 8 11 29 31
'}' (125) 5 10 11 30 31
error (256) 5 6
TOK_VOID (258) 14
TOK_BOOL (259) 15
TOK_CHAR (260) 16
TOK_INT (261) 17
TOK_STRING (262) 18 70
TOK_IF (263) 41 42
TOK_ELSE (264) 41
TOK_WHILE (265) 40
TOK_RETURN (266) 43 44
TOK_STRUCT (267) 10 11
TOK_FALSE (268) 82
TOK_TRUE (269) 83
TOK_NULL (270) 84
TOK_NEW (271) 69 70 71
TOK_ARRAY (272) 13 27
TOK_EQ (273) 61
TOK_NE (274) 62
TOK_LT (275) 56
TOK_LE (276) 58
TOK_GT (277) 57
TOK_GE (278) 59
TOK_IDENT (279) 10 11 12 13 19 26 27 69 72 75 76 78
TOK_INTCON (280) 79
TOK_CHARCON (281) 80
TOK_STRINGCON (282) 81
TOK_BLOCK (283)
TOK_CALL (284)
TOK_IFELSE (285)
TOK_INITDECL (286)
TOK_POS (287)
TOK_NEG (288)
TOK_NEWARRAY (289)
TOK_TYPEID (290)
TOK_FIELD (291)
TOK_ORD (292) 68
TOK_CHR (293) 67
TOK_ROOT (294)
TOK_DECLID (295)
TOK_INDEX (296)
TOK_NEWSTRING (297)
TOK_RETURNVOID (298)
TOK_VARDECL (299)
TOK_FUNCTION (300)
TOK_PARAMLIST (301)
TOK_PROTOTYPE (302)


Nonterminals, with rules where they appear

$accept (64)
    on left: 0
start (65)
    on left: 1, on right: 0
program (66)
    on left: 2 3 4 5 6 7, on right: 1 2 3 4 5 6
structhead (67)
    on left: 8 9, on right: 9 10
structdef (68)
    on left: 10 11, on right: 2
fielddecl (69)
    on left: 12 13, on right: 8 9
basetype (70)
    on left: 14 15 16 17 18 19, on right: 12 13 26 27 71
funchead (71)
    on left: 20 21, on right: 21 22 23
function (72)
    on left: 22 23 24 25, on right: 3
identdecl (73)
    on left: 26 27, on right: 20 21 22 23 24 25 39
blockhead (74)
    on left: 28 29, on right: 28 30
block (75)
    on left: 30 31, on right: 22 24 32
statement (76)
    on left: 32 33 34 35 36 37 38, on right: 4 28 29 40 41 42
vardecl (77)
    on left: 39, on right: 33
while (78)
    on left: 40, on right: 34
ifelse (79)
    on left: 41 42, on right: 35
return (80)
    on left: 43 44, on right: 36
expr (81)
    on left: 45 46 47 48 49 50 51, on right: 37 39 40 41 42 44 49 52
    53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 70 71 72 73 77
    78
binop (82)
    on left: 52 53 54 55 56 57 58 59 60 61 62 63, on right: 45
unop (83)
    on left: 64 65 66 67 68, on right: 46
allocator (84)
    on left: 69 70 71, on right: 47
callexprs (85)
    on left: 72 73, on right: 73 74
call (86)
    on left: 74 75, on right: 48
variable (87)
    on left: 76 77 78, on right: 50
constant (88)
    on left: 79 80 81 82 83 84, on right: 51


state 0

    0 $accept: . start $end

    $default  reduce using rule 7 (program)

    start    go to state 1
    program  go to state 2


state 1

    0 $accept: start . $end

    $end  shift, and go to state 3


state 2

    1 start: program .
    2 program: program . structdef
    3        | program . function
    4        | program . statement
    5        | program . error '}'
    6        | program . error ';'

    error          shift, and go to state 4
    TOK_VOID       shift, and go to state 5
    TOK_BOOL       shift, and go to state 6
    TOK_CHAR       shift, and go to state 7
    TOK_INT        shift, and go to state 8
    TOK_STRING     shift, and go to state 9
    TOK_IF         shift, and go to state 10
    TOK_WHILE      shift, and go to state 11
    TOK_RETURN     shift, and go to state 12
    TOK_STRUCT     shift, and go to state 13
    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 18
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27
    ';'            shift, and go to state 28
    '{'            shift, and go to state 29

    $end  reduce using rule 1 (start)

    structdef  go to state 30
    basetype   go to state 31
    function   go to state 32
    identdecl  go to state 33
    blockhead  go to state 34
    block      go to state 35
    statement  go to state 36
    vardecl    go to state 37
    while      go to state 38
    ifelse     go to state 39
    return     go to state 40
    expr       go to state 41
    binop      go to state 42
    unop       go to state 43
    allocator  go to state 44
    callexprs  go to state 45
    call       go to state 46
    variable   go to state 47
    constant   go to state 48


state 3

    0 $accept: start $end .

    $default  accept


state 4

    5 program: program error . '}'
    6        | program error . ';'

    '}'  shift, and go to state 49
    ';'  shift, and go to state 50


state 5

   14 basetype: TOK_VOID .

    $default  reduce using rule 14 (basetype)


state 6

   15 basetype: TOK_BOOL .

    $default  reduce using rule 15 (basetype)


state 7

   16 basetype: TOK_CHAR .

    $default  reduce using rule 16 (basetype)


state 8

   17 basetype: TOK_INT .

    $default  reduce using rule 17 (basetype)


state 9

   18 basetype: TOK_STRING .

    $default  reduce using rule 18 (basetype)


state 10

   41 ifelse: TOK_IF . '(' expr ')' statement TOK_ELSE statement
   42       | TOK_IF . '(' expr ')' statement

    '('  shift, and go to state 51


state 11

   40 while: TOK_WHILE . '(' expr ')' statement

    '('  shift, and go to state 52


state 12

   43 return: TOK_RETURN . ';'
   44       | TOK_RETURN . expr ';'

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 53
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27
    ';'            shift, and go to state 54

    expr       go to state 55
    binop      go to state 42
    unop       go to state 43
    allocator  go to state 44
    callexprs  go to state 45
    call       go to state 46
    variable   go to state 47
    constant   go to state 48


state 13

   10 structdef: TOK_STRUCT . TOK_IDENT structhead '}'
   11          | TOK_STRUCT . TOK_IDENT '{' '}'

    TOK_IDENT  shift, and go to state 56


state 14

   82 constant: TOK_FALSE .

    $default  reduce using rule 82 (constant)


state 15

   83 constant: TOK_TRUE .

    $default  reduce using rule 83 (constant)


state 16

   84 constant: TOK_NULL .

    $default  reduce using rule 84 (constant)


state 17

   69 allocator: TOK_NEW . TOK_IDENT '(' ')'
   70          | TOK_NEW . TOK_STRING '(' expr ')'
   71          | TOK_NEW . basetype '[' expr ']'

    TOK_VOID    shift, and go to state 5
    TOK_BOOL    shift, and go to state 6
    TOK_CHAR    shift, and go to state 7
    TOK_INT     shift, and go to state 8
    TOK_STRING  shift, and go to state 57
    TOK_IDENT   shift, and go to state 58

    basetype  go to state 59


state 18

   19 basetype: TOK_IDENT .
   72 callexprs: TOK_IDENT . '(' expr
   75 call: TOK_IDENT . '(' ')'
   76 variable: TOK_IDENT .

    '('  shift, and go to state 60

    TOK_ARRAY  reduce using rule 19 (basetype)
    TOK_IDENT  reduce using rule 19 (basetype)
    $default   reduce using rule 76 (variable)


state 19

   79 constant: TOK_INTCON .

    $default  reduce using rule 79 (constant)


state 20

   80 constant: TOK_CHARCON .

    $default  reduce using rule 80 (constant)


state 21

   81 constant: TOK_STRINGCON .

    $default  reduce using rule 81 (constant)


state 22

   68 unop: TOK_ORD . expr

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 53
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27

    expr       go to state 61
    binop      go to state 42
    unop       go to state 43
    allocator  go to state 44
    callexprs  go to state 45
    call       go to state 46
    variable   go to state 47
    constant   go to state 48


state 23

   67 unop: TOK_CHR . expr

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 53
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27

    expr       go to state 62
    binop      go to state 42
    unop       go to state 43
    allocator  go to state 44
    callexprs  go to state 45
    call       go to state 46
    variable   go to state 47
    constant   go to state 48


state 24

   64 unop: '+' . expr

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 53
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27

    expr       go to state 63
    binop      go to state 42
    unop       go to state 43
    allocator  go to state 44
    callexprs  go to state 45
    call       go to state 46
    variable   go to state 47
    constant   go to state 48


state 25

   65 unop: '-' . expr

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 53
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27

    expr       go to state 64
    binop      go to state 42
    unop       go to state 43
    allocator  go to state 44
    callexprs  go to state 45
    call       go to state 46
    variable   go to state 47
    constant   go to state 48


state 26

   66 unop: '!' . expr

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 53
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27

    expr       go to state 65
    binop      go to state 42
    unop       go to state 43
    allocator  go to state 44
    callexprs  go to state 45
    call       go to state 46
    variable   go to state 47
    constant   go to state 48


state 27

   49 expr: '(' . expr ')'

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 53
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27

    expr       go to state 66
    binop      go to state 42
    unop       go to state 43
    allocator  go to state 44
    callexprs  go to state 45
    call       go to state 46
    variable   go to state 47
    constant   go to state 48


state 28

   38 statement: ';' .

    $default  reduce using rule 38 (statement)


state 29

   29 blockhead: '{' . statement
   31 block: '{' . '}'

    TOK_VOID       shift, and go to state 5
    TOK_BOOL       shift, and go to state 6
    TOK_CHAR       shift, and go to state 7
    TOK_INT        shift, and go to state 8
    TOK_STRING     shift, and go to state 9
    TOK_IF         shift, and go to state 10
    TOK_WHILE      shift, and go to state 11
    TOK_RETURN     shift, and go to state 12
    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 18
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27
    '}'            shift, and go to state 67
    ';'            shift, and go to state 28
    '{'            shift, and go to state 29

    basetype   go to state 31
    identdecl  go to state 68
    blockhead  go to state 34
    block      go to state 35
    statement  go to state 69
    vardecl    go to state 37
    while      go to state 38
    ifelse     go to state 39
    return     go to state 40
    expr       go to state 41
    binop      go to state 42
    unop       go to state 43
    allocator  go to state 44
    callexprs  go to state 45
    call       go to state 46
    variable   go to state 47
    constant   go to state 48


state 30

    2 program: program structdef .

    $default  reduce using rule 2 (program)


state 31

   26 identdecl: basetype . TOK_IDENT
   27          | basetype . TOK_ARRAY TOK_IDENT

    TOK_ARRAY  shift, and go to state 70
    TOK_IDENT  shift, and go to state 71


state 32

    3 program: program function .

    $default  reduce using rule 3 (program)


state 33

   22 function: identdecl . funchead ')' block
   23         | identdecl . funchead ')' ';'
   24         | identdecl . '(' ')' block
   25         | identdecl . '(' ')' ';'
   39 vardecl: identdecl . '=' expr ';'

    '='  shift, and go to state 72
    '('  shift, and go to state 73

    funchead  go to state 74


state 34

   28 blockhead: blockhead . statement
   30 block: blockhead . '}'

    TOK_VOID       shift, and go to state 5
    TOK_BOOL       shift, and go to state 6
    TOK_CHAR       shift, and go to state 7
    TOK_INT        shift, and go to state 8
    TOK_STRING     shift, and go to state 9
    TOK_IF         shift, and go to state 10
    TOK_WHILE      shift, and go to state 11
    TOK_RETURN     shift, and go to state 12
    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 18
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27
    '}'            shift, and go to state 75
    ';'            shift, and go to state 28
    '{'            shift, and go to state 29

    basetype   go to state 31
    identdecl  go to state 68
    blockhead  go to state 34
    block      go to state 35
    statement  go to state 76
    vardecl    go to state 37
    while      go to state 38
    ifelse     go to state 39
    return     go to state 40
    expr       go to state 41
    binop      go to state 42
    unop       go to state 43
    allocator  go to state 44
    callexprs  go to state 45
    call       go to state 46
    variable   go to state 47
    constant   go to state 48


state 35

   32 statement: block .

    $default  reduce using rule 32 (statement)


state 36

    4 program: program statement .

    $default  reduce using rule 4 (program)


state 37

   33 statement: vardecl .

    $default  reduce using rule 33 (statement)


state 38

   34 statement: while .

    $default  reduce using rule 34 (statement)


state 39

   35 statement: ifelse .

    $default  reduce using rule 35 (statement)


state 40

   36 statement: return .

    $default  reduce using rule 36 (statement)


state 41

   37 statement: expr . ';'
   52 binop: expr . '+' expr
   53      | expr . '-' expr
   54      | expr . '*' expr
   55      | expr . '/' expr
   56      | expr . TOK_LT expr
   57      | expr . TOK_GT expr
   58      | expr . TOK_LE expr
   59      | expr . TOK_GE expr
   60      | expr . '=' expr
   61      | expr . TOK_EQ expr
   62      | expr . TOK_NE expr
   63      | expr . '%' expr
   77 variable: expr . '[' expr ']'
   78         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 77
    TOK_NE  shift, and go to state 78
    TOK_LT  shift, and go to state 79
    TOK_LE  shift, and go to state 80
    TOK_GT  shift, and go to state 81
    TOK_GE  shift, and go to state 82
    '='     shift, and go to state 83
    '+'     shift, and go to state 84
    '-'     shift, and go to state 85
    '*'     shift, and go to state 86
    '/'     shift, and go to state 87
    '%'     shift, and go to state 88
    '['     shift, and go to state 89
    '.'     shift, and go to state 90
    ';'     shift, and go to state 91


state 42

   45 expr: binop .

    $default  reduce using rule 45 (expr)


state 43

   46 expr: unop .

    $default  reduce using rule 46 (expr)


state 44

   47 expr: allocator .

    $default  reduce using rule 47 (expr)


state 45

   73 callexprs: callexprs . ',' expr
   74 call: callexprs . ')'

    ','  shift, and go to state 92
    ')'  shift, and go to state 93


state 46

   48 expr: call .

    $default  reduce using rule 48 (expr)


state 47

   50 expr: variable .

    $default  reduce using rule 50 (expr)


state 48

   51 expr: constant .

    $default  reduce using rule 51 (expr)


state 49

    5 program: program error '}' .

    $default  reduce using rule 5 (program)


state 50

    6 program: program error ';' .

    $default  reduce using rule 6 (program)


state 51

   41 ifelse: TOK_IF '(' . expr ')' statement TOK_ELSE statement
   42       | TOK_IF '(' . expr ')' statement

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 53
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27

    expr       go to state 94
    binop      go to state 42
    unop       go to state 43
    allocator  go to state 44
    callexprs  go to state 45
    call       go to state 46
    variable   go to state 47
    constant   go to state 48


state 52

   40 while: TOK_WHILE '(' . expr ')' statement

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 53
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27

    expr       go to state 95
    binop      go to state 42
    unop       go to state 43
    allocator  go to state 44
    callexprs  go to state 45
    call       go to state 46
    variable   go to state 47
    constant   go to state 48


state 53

   72 callexprs: TOK_IDENT . '(' expr
   75 call: TOK_IDENT . '(' ')'
   76 variable: TOK_IDENT .

    '('  shift, and go to state 60

    $default  reduce using rule 76 (variable)


state 54

   43 return: TOK_RETURN ';' .

    $default  reduce using rule 43 (return)


state 55

   44 return: TOK_RETURN expr . ';'
   52 binop: expr . '+' expr
   53      | expr . '-' expr
   54      | expr . '*' expr
   55      | expr . '/' expr
   56      | expr . TOK_LT expr
   57      | expr . TOK_GT expr
   58      | expr . TOK_LE expr
   59      | expr . TOK_GE expr
   60      | expr . '=' expr
   61      | expr . TOK_EQ expr
   62      | expr . TOK_NE expr
   63      | expr . '%' expr
   77 variable: expr . '[' expr ']'
   78         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 77
    TOK_NE  shift, and go to state 78
    TOK_LT  shift, and go to state 79
    TOK_LE  shift, and go to state 80
    TOK_GT  shift, and go to state 81
    TOK_GE  shift, and go to state 82
    '='     shift, and go to state 83
    '+'     shift, and go to state 84
    '-'     shift, and go to state 85
    '*'     shift, and go to state 86
    '/'     shift, and go to state 87
    '%'     shift, and go to state 88
    '['     shift, and go to state 89
    '.'     shift, and go to state 90
    ';'     shift, and go to state 96


state 56

   10 structdef: TOK_STRUCT TOK_IDENT . structhead '}'
   11          | TOK_STRUCT TOK_IDENT . '{' '}'

    '{'  shift, and go to state 97

    structhead  go to state 98


state 57

   18 basetype: TOK_STRING .
   70 allocator: TOK_NEW TOK_STRING . '(' expr ')'

    '('  shift, and go to state 99

    $default  reduce using rule 18 (basetype)


state 58

   19 basetype: TOK_IDENT .
   69 allocator: TOK_NEW TOK_IDENT . '(' ')'

    '('  shift, and go to state 100

    $default  reduce using rule 19 (basetype)


state 59

   71 allocator: TOK_NEW basetype . '[' expr ']'

    '['  shift, and go to state 101


state 60

   72 callexprs: TOK_IDENT '(' . expr
   75 call: TOK_IDENT '(' . ')'

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 53
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27
    ')'            shift, and go to state 102

    expr       go to state 103
    binop      go to state 42
    unop       go to state 43
    allocator  go to state 44
    callexprs  go to state 45
    call       go to state 46
    variable   go to state 47
    constant   go to state 48


state 61

   52 binop: expr . '+' expr
   53      | expr . '-' expr
   54      | expr . '*' expr
   55      | expr . '/' expr
   56      | expr . TOK_LT expr
   57      | expr . TOK_GT expr
   58      | expr . TOK_LE expr
   59      | expr . TOK_GE expr
   60      | expr . '=' expr
   61      | expr . TOK_EQ expr
   62      | expr . TOK_NE expr
   63      | expr . '%' expr
   68 unop: TOK_ORD expr .
   77 variable: expr . '[' expr ']'
   78         | expr . '.' TOK_IDENT

    '['  shift, and go to state 89
    '.'  shift, and go to state 90

    $default  reduce using rule 68 (unop)


state 62

   52 binop: expr . '+' expr
   53      | expr . '-' expr
   54      | expr . '*' expr
   55      | expr . '/' expr
   56      | expr . TOK_LT expr
   57      | expr . TOK_GT expr
   58      | expr . TOK_LE expr
   59      | expr . TOK_GE expr
   60      | expr . '=' expr
   61      | expr . TOK_EQ expr
   62      | expr . TOK_NE expr
   63      | expr . '%' expr
   67 unop: TOK_CHR expr .
   77 variable: expr . '[' expr ']'
   78         | expr . '.' TOK_IDENT

    '['  shift, and go to state 89
    '.'  shift, and go to state 90

    $default  reduce using rule 67 (unop)


state 63

   52 binop: expr . '+' expr
   53      | expr . '-' expr
   54      | expr . '*' expr
   55      | expr . '/' expr
   56      | expr . TOK_LT expr
   57      | expr . TOK_GT expr
   58      | expr . TOK_LE expr
   59      | expr . TOK_GE expr
   60      | expr . '=' expr
   61      | expr . TOK_EQ expr
   62      | expr . TOK_NE expr
   63      | expr . '%' expr
   64 unop: '+' expr .
   77 variable: expr . '[' expr ']'
   78         | expr . '.' TOK_IDENT

    '*'  shift, and go to state 86
    '/'  shift, and go to state 87
    '%'  shift, and go to state 88
    '['  shift, and go to state 89
    '.'  shift, and go to state 90

    $default  reduce using rule 64 (unop)


state 64

   52 binop: expr . '+' expr
   53      | expr . '-' expr
   54      | expr . '*' expr
   55      | expr . '/' expr
   56      | expr . TOK_LT expr
   57      | expr . TOK_GT expr
   58      | expr . TOK_LE expr
   59      | expr . TOK_GE expr
   60      | expr . '=' expr
   61      | expr . TOK_EQ expr
   62      | expr . TOK_NE expr
   63      | expr . '%' expr
   65 unop: '-' expr .
   77 variable: expr . '[' expr ']'
   78         | expr . '.' TOK_IDENT

    '*'  shift, and go to state 86
    '/'  shift, and go to state 87
    '%'  shift, and go to state 88
    '['  shift, and go to state 89
    '.'  shift, and go to state 90

    $default  reduce using rule 65 (unop)


state 65

   52 binop: expr . '+' expr
   53      | expr . '-' expr
   54      | expr . '*' expr
   55      | expr . '/' expr
   56      | expr . TOK_LT expr
   57      | expr . TOK_GT expr
   58      | expr . TOK_LE expr
   59      | expr . TOK_GE expr
   60      | expr . '=' expr
   61      | expr . TOK_EQ expr
   62      | expr . TOK_NE expr
   63      | expr . '%' expr
   66 unop: '!' expr .
   77 variable: expr . '[' expr ']'
   78         | expr . '.' TOK_IDENT

    '['  shift, and go to state 89
    '.'  shift, and go to state 90

    $default  reduce using rule 66 (unop)


state 66

   49 expr: '(' expr . ')'
   52 binop: expr . '+' expr
   53      | expr . '-' expr
   54      | expr . '*' expr
   55      | expr . '/' expr
   56      | expr . TOK_LT expr
   57      | expr . TOK_GT expr
   58      | expr . TOK_LE expr
   59      | expr . TOK_GE expr
   60      | expr . '=' expr
   61      | expr . TOK_EQ expr
   62      | expr . TOK_NE expr
   63      | expr . '%' expr
   77 variable: expr . '[' expr ']'
   78         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 77
    TOK_NE  shift, and go to state 78
    TOK_LT  shift, and go to state 79
    TOK_LE  shift, and go to state 80
    TOK_GT  shift, and go to state 81
    TOK_GE  shift, and go to state 82
    '='     shift, and go to state 83
    '+'     shift, and go to state 84
    '-'     shift, and go to state 85
    '*'     shift, and go to state 86
    '/'     shift, and go to state 87
    '%'     shift, and go to state 88
    '['     shift, and go to state 89
    '.'     shift, and go to state 90
    ')'     shift, and go to state 104


state 67

   31 block: '{' '}' .

    $default  reduce using rule 31 (block)


state 68

   39 vardecl: identdecl . '=' expr ';'

    '='  shift, and go to state 72


state 69

   29 blockhead: '{' statement .

    $default  reduce using rule 29 (blockhead)


state 70

   27 identdecl: basetype TOK_ARRAY . TOK_IDENT

    TOK_IDENT  shift, and go to state 105


state 71

   26 identdecl: basetype TOK_IDENT .

    $default  reduce using rule 26 (identdecl)


state 72

   39 vardecl: identdecl '=' . expr ';'

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 53
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27

    expr       go to state 106
    binop      go to state 42
    unop       go to state 43
    allocator  go to state 44
    callexprs  go to state 45
    call       go to state 46
    variable   go to state 47
    constant   go to state 48


state 73

   20 funchead: '(' . identdecl
   24 function: identdecl '(' . ')' block
   25         | identdecl '(' . ')' ';'

    TOK_VOID    shift, and go to state 5
    TOK_BOOL    shift, and go to state 6
    TOK_CHAR    shift, and go to state 7
    TOK_INT     shift, and go to state 8
    TOK_STRING  shift, and go to state 9
    TOK_IDENT   shift, and go to state 107
    ')'         shift, and go to state 108

    basetype   go to state 31
    identdecl  go to state 109


state 74

   21 funchead: funchead . ',' identdecl
   22 function: identdecl funchead . ')' block
   23         | identdecl funchead . ')' ';'

    ','  shift, and go to state 110
    ')'  shift, and go to state 111


state 75

   30 block: blockhead '}' .

    $default  reduce using rule 30 (block)


state 76

   28 blockhead: blockhead statement .

    $default  reduce using rule 28 (blockhead)


state 77

   61 binop: expr TOK_EQ . expr

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 53
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27

    expr       go to state 112
    binop      go to state 42
    unop       go to state 43
    allocator  go to state 44
    callexprs  go to state 45
    call       go to state 46
    variable   go to state 47
    constant   go to state 48


state 78

   62 binop: expr TOK_NE . expr

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 53
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27

    expr       go to state 113
    binop      go to state 42
    unop       go to state 43
    allocator  go to state 44
    callexprs  go to state 45
    call       go to state 46
    variable   go to state 47
    constant   go to state 48


state 79

   56 binop: expr TOK_LT . expr

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 53
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27

    expr       go to state 114
    binop      go to state 42
    unop       go to state 43
    allocator  go to state 44
    callexprs  go to state 45
    call       go to state 46
    variable   go to state 47
    constant   go to state 48


state 80

   58 binop: expr TOK_LE . expr

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 53
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27

    expr       go to state 115
    binop      go to state 42
    unop       go to state 43
    allocator  go to state 44
    callexprs  go to state 45
    call       go to state 46
    variable   go to state 47
    constant   go to state 48


state 81

   57 binop: expr TOK_GT . expr

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 53
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27

    expr       go to state 116
    binop      go to state 42
    unop       go to state 43
    allocator  go to state 44
    callexprs  go to state 45
    call       go to state 46
    variable   go to state 47
    constant   go to state 48


state 82

   59 binop: expr TOK_GE . expr

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 53
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27

    expr       go to state 117
    binop      go to state 42
    unop       go to state 43
    allocator  go to state 44
    callexprs  go to state 45
    call       go to state 46
    variable   go to state 47
    constant   go to state 48


state 83

   60 binop: expr '=' . expr

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 53
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27

    expr       go to state 118
    binop      go to state 42
    unop       go to state 43
    allocator  go to state 44
    callexprs  go to state 45
    call       go to state 46
    variable   go to state 47
    constant   go to state 48


state 84

   52 binop: expr '+' . expr

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 53
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27

    expr       go to state 119
    binop      go to state 42
    unop       go to state 43
    allocator  go to state 44
    callexprs  go to state 45
    call       go to state 46
    variable   go to state 47
    constant   go to state 48


state 85

   53 binop: expr '-' . expr

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 53
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27

    expr       go to state 120
    binop      go to state 42
    unop       go to state 43
    allocator  go to state 44
    callexprs  go to state 45
    call       go to state 46
    variable   go to state 47
    constant   go to state 48


state 86

   54 binop: expr '*' . expr

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 53
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27

    expr       go to state 121
    binop      go to state 42
    unop       go to state 43
    allocator  go to state 44
    callexprs  go to state 45
    call       go to state 46
    variable   go to state 47
    constant   go to state 48


state 87

   55 binop: expr '/' . expr

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 53
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27

    expr       go to state 122
    binop      go to state 42
    unop       go to state 43
    allocator  go to state 44
    callexprs  go to state 45
    call       go to state 46
    variable   go to state 47
    constant   go to state 48


state 88

   63 binop: expr '%' . expr

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 53
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27

    expr       go to state 123
    binop      go to state 42
    unop       go to state 43
    allocator  go to state 44
    callexprs  go to state 45
    call       go to state 46
    variable   go to state 47
    constant   go to state 48


state 89

   77 variable: expr '[' . expr ']'

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 53
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27

    expr       go to state 124
    binop      go to state 42
    unop       go to state 43
    allocator  go to state 44
    callexprs  go to state 45
    call       go to state 46
    variable   go to state 47
    constant   go to state 48


state 90

   78 variable: expr '.' . TOK_IDENT

    TOK_IDENT  shift, and go to state 125


state 91

   37 statement: expr ';' .

    $default  reduce using rule 37 (statement)


state 92

   73 callexprs: callexprs ',' . expr

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 53
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27

    expr       go to state 126
    binop      go to state 42
    unop       go to state 43
    allocator  go to state 44
    callexprs  go to state 45
    call       go to state 46
    variable   go to state 47
    constant   go to state 48


state 93

   74 call: callexprs ')' .

    $default  reduce using rule 74 (call)


state 94

   41 ifelse: TOK_IF '(' expr . ')' statement TOK_ELSE statement
   42       | TOK_IF '(' expr . ')' statement
   52 binop: expr . '+' expr
   53      | expr . '-' expr
   54      | expr . '*' expr
   55      | expr . '/' expr
   56      | expr . TOK_LT expr
   57      | expr . TOK_GT expr
   58      | expr . TOK_LE expr
   59      | expr . TOK_GE expr
   60      | expr . '=' expr
   61      | expr . TOK_EQ expr
   62      | expr . TOK_NE expr
   63      | expr . '%' expr
   77 variable: expr . '[' expr ']'
   78         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 77
    TOK_NE  shift, and go to state 78
    TOK_LT  shift, and go to state 79
    TOK_LE  shift, and go to state 80
    TOK_GT  shift, and go to state 81
    TOK_GE  shift, and go to state 82
    '='     shift, and go to state 83
    '+'     shift, and go to state 84
    '-'     shift, and go to state 85
    '*'     shift, and go to state 86
    '/'     shift, and go to state 87
    '%'     shift, and go to state 88
    '['     shift, and go to state 89
    '.'     shift, and go to state 90
    ')'     shift, and go to state 127


state 95

   40 while: TOK_WHILE '(' expr . ')' statement
   52 binop: expr . '+' expr
   53      | expr . '-' expr
   54      | expr . '*' expr
   55      | expr . '/' expr
   56      | expr . TOK_LT expr
   57      | expr . TOK_GT expr
   58      | expr . TOK_LE expr
   59      | expr . TOK_GE expr
   60      | expr . '=' expr
   61      | expr . TOK_EQ expr
   62      | expr . TOK_NE expr
   63      | expr . '%' expr
   77 variable: expr . '[' expr ']'
   78         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 77
    TOK_NE  shift, and go to state 78
    TOK_LT  shift, and go to state 79
    TOK_LE  shift, and go to state 80
    TOK_GT  shift, and go to state 81
    TOK_GE  shift, and go to state 82
    '='     shift, and go to state 83
    '+'     shift, and go to state 84
    '-'     shift, and go to state 85
    '*'     shift, and go to state 86
    '/'     shift, and go to state 87
    '%'     shift, and go to state 88
    '['     shift, and go to state 89
    '.'     shift, and go to state 90
    ')'     shift, and go to state 128


state 96

   44 return: TOK_RETURN expr ';' .

    $default  reduce using rule 44 (return)


state 97

    8 structhead: '{' . fielddecl
   11 structdef: TOK_STRUCT TOK_IDENT '{' . '}'

    TOK_VOID    shift, and go to state 5
    TOK_BOOL    shift, and go to state 6
    TOK_CHAR    shift, and go to state 7
    TOK_INT     shift, and go to state 8
    TOK_STRING  shift, and go to state 9
    TOK_IDENT   shift, and go to state 107
    '}'         shift, and go to state 129

    fielddecl  go to state 130
    basetype   go to state 131


state 98

    9 structhead: structhead . fielddecl
   10 structdef: TOK_STRUCT TOK_IDENT structhead . '}'

    TOK_VOID    shift, and go to state 5
    TOK_BOOL    shift, and go to state 6
    TOK_CHAR    shift, and go to state 7
    TOK_INT     shift, and go to state 8
    TOK_STRING  shift, and go to state 9
    TOK_IDENT   shift, and go to state 107
    '}'         shift, and go to state 132

    fielddecl  go to state 133
    basetype   go to state 131


state 99

   70 allocator: TOK_NEW TOK_STRING '(' . expr ')'

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 53
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27

    expr       go to state 134
    binop      go to state 42
    unop       go to state 43
    allocator  go to state 44
    callexprs  go to state 45
    call       go to state 46
    variable   go to state 47
    constant   go to state 48


state 100

   69 allocator: TOK_NEW TOK_IDENT '(' . ')'

    ')'  shift, and go to state 135


state 101

   71 allocator: TOK_NEW basetype '[' . expr ']'

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 53
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27

    expr       go to state 136
    binop      go to state 42
    unop       go to state 43
    allocator  go to state 44
    callexprs  go to state 45
    call       go to state 46
    variable   go to state 47
    constant   go to state 48


state 102

   75 call: TOK_IDENT '(' ')' .

    $default  reduce using rule 75 (call)


state 103

   52 binop: expr . '+' expr
   53      | expr . '-' expr
   54      | expr . '*' expr
   55      | expr . '/' expr
   56      | expr . TOK_LT expr
   57      | expr . TOK_GT expr
   58      | expr . TOK_LE expr
   59      | expr . TOK_GE expr
   60      | expr . '=' expr
   61      | expr . TOK_EQ expr
   62      | expr . TOK_NE expr
   63      | expr . '%' expr
   72 callexprs: TOK_IDENT '(' expr .
   77 variable: expr . '[' expr ']'
   78         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 77
    TOK_NE  shift, and go to state 78
    TOK_LT  shift, and go to state 79
    TOK_LE  shift, and go to state 80
    TOK_GT  shift, and go to state 81
    TOK_GE  shift, and go to state 82
    '='     shift, and go to state 83
    '+'     shift, and go to state 84
    '-'     shift, and go to state 85
    '*'     shift, and go to state 86
    '/'     shift, and go to state 87
    '%'     shift, and go to state 88
    '['     shift, and go to state 89
    '.'     shift, and go to state 90

    $default  reduce using rule 72 (callexprs)


state 104

   49 expr: '(' expr ')' .

    $default  reduce using rule 49 (expr)


state 105

   27 identdecl: basetype TOK_ARRAY TOK_IDENT .

    $default  reduce using rule 27 (identdecl)


state 106

   39 vardecl: identdecl '=' expr . ';'
   52 binop: expr . '+' expr
   53      | expr . '-' expr
   54      | expr . '*' expr
   55      | expr . '/' expr
   56      | expr . TOK_LT expr
   57      | expr . TOK_GT expr
   58      | expr . TOK_LE expr
   59      | expr . TOK_GE expr
   60      | expr . '=' expr
   61      | expr . TOK_EQ expr
   62      | expr . TOK_NE expr
   63      | expr . '%' expr
   77 variable: expr . '[' expr ']'
   78         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 77
    TOK_NE  shift, and go to state 78
    TOK_LT  shift, and go to state 79
    TOK_LE  shift, and go to state 80
    TOK_GT  shift, and go to state 81
    TOK_GE  shift, and go to state 82
    '='     shift, and go to state 83
    '+'     shift, and go to state 84
    '-'     shift, and go to state 85
    '*'     shift, and go to state 86
    '/'     shift, and go to state 87
    '%'     shift, and go to state 88
    '['     shift, and go to state 89
    '.'     shift, and go to state 90
    ';'     shift, and go to state 137


state 107

   19 basetype: TOK_IDENT .

    $default  reduce using rule 19 (basetype)


state 108

   24 function: identdecl '(' ')' . block
   25         | identdecl '(' ')' . ';'

    ';'  shift, and go to state 138
    '{'  shift, and go to state 29

    blockhead  go to state 34
    block      go to state 139


state 109

   20 funchead: '(' identdecl .

    $default  reduce using rule 20 (funchead)


state 110

   21 funchead: funchead ',' . identdecl

    TOK_VOID    shift, and go to state 5
    TOK_BOOL    shift, and go to state 6
    TOK_CHAR    shift, and go to state 7
    TOK_INT     shift, and go to state 8
    TOK_STRING  shift, and go to state 9
    TOK_IDENT   shift, and go to state 107

    basetype   go to state 31
    identdecl  go to state 140


state 111

   22 function: identdecl funchead ')' . block
   23         | identdecl funchead ')' . ';'

    ';'  shift, and go to state 141
    '{'  shift, and go to state 29

    blockhead  go to state 34
    block      go to state 142


state 112

   52 binop: expr . '+' expr
   53      | expr . '-' expr
   54      | expr . '*' expr
   55      | expr . '/' expr
   56      | expr . TOK_LT expr
   57      | expr . TOK_GT expr
   58      | expr . TOK_LE expr
   59      | expr . TOK_GE expr
   60      | expr . '=' expr
   61      | expr . TOK_EQ expr
   61      | expr TOK_EQ expr .
   62      | expr . TOK_NE expr
   63      | expr . '%' expr
   77 variable: expr . '[' expr ']'
   78         | expr . '.' TOK_IDENT

    '+'  shift, and go to state 84
    '-'  shift, and go to state 85
    '*'  shift, and go to state 86
    '/'  shift, and go to state 87
    '%'  shift, and go to state 88
    '['  shift, and go to state 89
    '.'  shift, and go to state 90

    $default  reduce using rule 61 (binop)


state 113

   52 binop: expr . '+' expr
   53      | expr . '-' expr
   54      | expr . '*' expr
   55      | expr . '/' expr
   56      | expr . TOK_LT expr
   57      | expr . TOK_GT expr
   58      | expr . TOK_LE expr
   59      | expr . TOK_GE expr
   60      | expr . '=' expr
   61      | expr . TOK_EQ expr
   62      | expr . TOK_NE expr
   62      | expr TOK_NE expr .
   63      | expr . '%' expr
   77 variable: expr . '[' expr ']'
   78         | expr . '.' TOK_IDENT

    '+'  shift, and go to state 84
    '-'  shift, and go to state 85
    '*'  shift, and go to state 86
    '/'  shift, and go to state 87
    '%'  shift, and go to state 88
    '['  shift, and go to state 89
    '.'  shift, and go to state 90

    $default  reduce using rule 62 (binop)


state 114

   52 binop: expr . '+' expr
   53      | expr . '-' expr
   54      | expr . '*' expr
   55      | expr . '/' expr
   56      | expr . TOK_LT expr
   56      | expr TOK_LT expr .
   57      | expr . TOK_GT expr
   58      | expr . TOK_LE expr
   59      | expr . TOK_GE expr
   60      | expr . '=' expr
   61      | expr . TOK_EQ expr
   62      | expr . TOK_NE expr
   63      | expr . '%' expr
   77 variable: expr . '[' expr ']'
   78         | expr . '.' TOK_IDENT

    '+'  shift, and go to state 84
    '-'  shift, and go to state 85
    '*'  shift, and go to state 86
    '/'  shift, and go to state 87
    '%'  shift, and go to state 88
    '['  shift, and go to state 89
    '.'  shift, and go to state 90

    $default  reduce using rule 56 (binop)


state 115

   52 binop: expr . '+' expr
   53      | expr . '-' expr
   54      | expr . '*' expr
   55      | expr . '/' expr
   56      | expr . TOK_LT expr
   57      | expr . TOK_GT expr
   58      | expr . TOK_LE expr
   58      | expr TOK_LE expr .
   59      | expr . TOK_GE expr
   60      | expr . '=' expr
   61      | expr . TOK_EQ expr
   62      | expr . TOK_NE expr
   63      | expr . '%' expr
   77 variable: expr . '[' expr ']'
   78         | expr . '.' TOK_IDENT

    '+'  shift, and go to state 84
    '-'  shift, and go to state 85
    '*'  shift, and go to state 86
    '/'  shift, and go to state 87
    '%'  shift, and go to state 88
    '['  shift, and go to state 89
    '.'  shift, and go to state 90

    $default  reduce using rule 58 (binop)


state 116

   52 binop: expr . '+' expr
   53      | expr . '-' expr
   54      | expr . '*' expr
   55      | expr . '/' expr
   56      | expr . TOK_LT expr
   57      | expr . TOK_GT expr
   57      | expr TOK_GT expr .
   58      | expr . TOK_LE expr
   59      | expr . TOK_GE expr
   60      | expr . '=' expr
   61      | expr . TOK_EQ expr
   62      | expr . TOK_NE expr
   63      | expr . '%' expr
   77 variable: expr . '[' expr ']'
   78         | expr . '.' TOK_IDENT

    '+'  shift, and go to state 84
    '-'  shift, and go to state 85
    '*'  shift, and go to state 86
    '/'  shift, and go to state 87
    '%'  shift, and go to state 88
    '['  shift, and go to state 89
    '.'  shift, and go to state 90

    $default  reduce using rule 57 (binop)


state 117

   52 binop: expr . '+' expr
   53      | expr . '-' expr
   54      | expr . '*' expr
   55      | expr . '/' expr
   56      | expr . TOK_LT expr
   57      | expr . TOK_GT expr
   58      | expr . TOK_LE expr
   59      | expr . TOK_GE expr
   59      | expr TOK_GE expr .
   60      | expr . '=' expr
   61      | expr . TOK_EQ expr
   62      | expr . TOK_NE expr
   63      | expr . '%' expr
   77 variable: expr . '[' expr ']'
   78         | expr . '.' TOK_IDENT

    '+'  shift, and go to state 84
    '-'  shift, and go to state 85
    '*'  shift, and go to state 86
    '/'  shift, and go to state 87
    '%'  shift, and go to state 88
    '['  shift, and go to state 89
    '.'  shift, and go to state 90

    $default  reduce using rule 59 (binop)


state 118

   52 binop: expr . '+' expr
   53      | expr . '-' expr
   54      | expr . '*' expr
   55      | expr . '/' expr
   56      | expr . TOK_LT expr
   57      | expr . TOK_GT expr
   58      | expr . TOK_LE expr
   59      | expr . TOK_GE expr
   60      | expr . '=' expr
   60      | expr '=' expr .
   61      | expr . TOK_EQ expr
   62      | expr . TOK_NE expr
   63      | expr . '%' expr
   77 variable: expr . '[' expr ']'
   78         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 77
    TOK_NE  shift, and go to state 78
    TOK_LT  shift, and go to state 79
    TOK_LE  shift, and go to state 80
    TOK_GT  shift, and go to state 81
    TOK_GE  shift, and go to state 82
    '='     shift, and go to state 83
    '+'     shift, and go to state 84
    '-'     shift, and go to state 85
    '*'     shift, and go to state 86
    '/'     shift, and go to state 87
    '%'     shift, and go to state 88
    '['     shift, and go to state 89
    '.'     shift, and go to state 90

    $default  reduce using rule 60 (binop)


state 119

   52 binop: expr . '+' expr
   52      | expr '+' expr .
   53      | expr . '-' expr
   54      | expr . '*' expr
   55      | expr . '/' expr
   56      | expr . TOK_LT expr
   57      | expr . TOK_GT expr
   58      | expr . TOK_LE expr
   59      | expr . TOK_GE expr
   60      | expr . '=' expr
   61      | expr . TOK_EQ expr
   62      | expr . TOK_NE expr
   63      | expr . '%' expr
   77 variable: expr . '[' expr ']'
   78         | expr . '.' TOK_IDENT

    '*'  shift, and go to state 86
    '/'  shift, and go to state 87
    '%'  shift, and go to state 88
    '['  shift, and go to state 89
    '.'  shift, and go to state 90

    $default  reduce using rule 52 (binop)


state 120

   52 binop: expr . '+' expr
   53      | expr . '-' expr
   53      | expr '-' expr .
   54      | expr . '*' expr
   55      | expr . '/' expr
   56      | expr . TOK_LT expr
   57      | expr . TOK_GT expr
   58      | expr . TOK_LE expr
   59      | expr . TOK_GE expr
   60      | expr . '=' expr
   61      | expr . TOK_EQ expr
   62      | expr . TOK_NE expr
   63      | expr . '%' expr
   77 variable: expr . '[' expr ']'
   78         | expr . '.' TOK_IDENT

    '*'  shift, and go to state 86
    '/'  shift, and go to state 87
    '%'  shift, and go to state 88
    '['  shift, and go to state 89
    '.'  shift, and go to state 90

    $default  reduce using rule 53 (binop)


state 121

   52 binop: expr . '+' expr
   53      | expr . '-' expr
   54      | expr . '*' expr
   54      | expr '*' expr .
   55      | expr . '/' expr
   56      | expr . TOK_LT expr
   57      | expr . TOK_GT expr
   58      | expr . TOK_LE expr
   59      | expr . TOK_GE expr
   60      | expr . '=' expr
   61      | expr . TOK_EQ expr
   62      | expr . TOK_NE expr
   63      | expr . '%' expr
   77 variable: expr . '[' expr ']'
   78         | expr . '.' TOK_IDENT

    '['  shift, and go to state 89
    '.'  shift, and go to state 90

    $default  reduce using rule 54 (binop)


state 122

   52 binop: expr . '+' expr
   53      | expr . '-' expr
   54      | expr . '*' expr
   55      | expr . '/' expr
   55      | expr '/' expr .
   56      | expr . TOK_LT expr
   57      | expr . TOK_GT expr
   58      | expr . TOK_LE expr
   59      | expr . TOK_GE expr
   60      | expr . '=' expr
   61      | expr . TOK_EQ expr
   62      | expr . TOK_NE expr
   63      | expr . '%' expr
   77 variable: expr . '[' expr ']'
   78         | expr . '.' TOK_IDENT

    '['  shift, and go to state 89
    '.'  shift, and go to state 90

    $default  reduce using rule 55 (binop)


state 123

   52 binop: expr . '+' expr
   53      | expr . '-' expr
   54      | expr . '*' expr
   55      | expr . '/' expr
   56      | expr . TOK_LT expr
   57      | expr . TOK_GT expr
   58      | expr . TOK_LE expr
   59      | expr . TOK_GE expr
   60      | expr . '=' expr
   61      | expr . TOK_EQ expr
   62      | expr . TOK_NE expr
   63      | expr . '%' expr
   63      | expr '%' expr .
   77 variable: expr . '[' expr ']'
   78         | expr . '.' TOK_IDENT

    '['  shift, and go to state 89
    '.'  shift, and go to state 90

    $default  reduce using rule 63 (binop)


state 124

   52 binop: expr . '+' expr
   53      | expr . '-' expr
   54      | expr . '*' expr
   55      | expr . '/' expr
   56      | expr . TOK_LT expr
   57      | expr . TOK_GT expr
   58      | expr . TOK_LE expr
   59      | expr . TOK_GE expr
   60      | expr . '=' expr
   61      | expr . TOK_EQ expr
   62      | expr . TOK_NE expr
   63      | expr . '%' expr
   77 variable: expr . '[' expr ']'
   77         | expr '[' expr . ']'
   78         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 77
    TOK_NE  shift, and go to state 78
    TOK_LT  shift, and go to state 79
    TOK_LE  shift, and go to state 80
    TOK_GT  shift, and go to state 81
    TOK_GE  shift, and go to state 82
    '='     shift, and go to state 83
    '+'     shift, and go to state 84
    '-'     shift, and go to state 85
    '*'     shift, and go to state 86
    '/'     shift, and go to state 87
    '%'     shift, and go to state 88
    '['     shift, and go to state 89
    '.'     shift, and go to state 90
    ']'     shift, and go to state 143


state 125

   78 variable: expr '.' TOK_IDENT .

    $default  reduce using rule 78 (variable)


state 126

   52 binop: expr . '+' expr
   53      | expr . '-' expr
   54      | expr . '*' expr
   55      | expr . '/' expr
   56      | expr . TOK_LT expr
   57      | expr . TOK_GT expr
   58      | expr . TOK_LE expr
   59      | expr . TOK_GE expr
   60      | expr . '=' expr
   61      | expr . TOK_EQ expr
   62      | expr . TOK_NE expr
   63      | expr . '%' expr
   73 callexprs: callexprs ',' expr .
   77 variable: expr . '[' expr ']'
   78         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 77
    TOK_NE  shift, and go to state 78
    TOK_LT  shift, and go to state 79
    TOK_LE  shift, and go to state 80
    TOK_GT  shift, and go to state 81
    TOK_GE  shift, and go to state 82
    '='     shift, and go to state 83
    '+'     shift, and go to state 84
    '-'     shift, and go to state 85
    '*'     shift, and go to state 86
    '/'     shift, and go to state 87
    '%'     shift, and go to state 88
    '['     shift, and go to state 89
    '.'     shift, and go to state 90

    $default  reduce using rule 73 (callexprs)


state 127

   41 ifelse: TOK_IF '(' expr ')' . statement TOK_ELSE statement
   42       | TOK_IF '(' expr ')' . statement

    TOK_VOID       shift, and go to state 5
    TOK_BOOL       shift, and go to state 6
    TOK_CHAR       shift, and go to state 7
    TOK_INT        shift, and go to state 8
    TOK_STRING     shift, and go to state 9
    TOK_IF         shift, and go to state 10
    TOK_WHILE      shift, and go to state 11
    TOK_RETURN     shift, and go to state 12
    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 18
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27
    ';'            shift, and go to state 28
    '{'            shift, and go to state 29

    basetype   go to state 31
    identdecl  go to state 68
    blockhead  go to state 34
    block      go to state 35
    statement  go to state 144
    vardecl    go to state 37
    while      go to state 38
    ifelse     go to state 39
    return     go to state 40
    expr       go to state 41
    binop      go to state 42
    unop       go to state 43
    allocator  go to state 44
    callexprs  go to state 45
    call       go to state 46
    variable   go to state 47
    constant   go to state 48


state 128

   40 while: TOK_WHILE '(' expr ')' . statement

    TOK_VOID       shift, and go to state 5
    TOK_BOOL       shift, and go to state 6
    TOK_CHAR       shift, and go to state 7
    TOK_INT        shift, and go to state 8
    TOK_STRING     shift, and go to state 9
    TOK_IF         shift, and go to state 10
    TOK_WHILE      shift, and go to state 11
    TOK_RETURN     shift, and go to state 12
    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 18
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27
    ';'            shift, and go to state 28
    '{'            shift, and go to state 29

    basetype   go to state 31
    identdecl  go to state 68
    blockhead  go to state 34
    block      go to state 35
    statement  go to state 145
    vardecl    go to state 37
    while      go to state 38
    ifelse     go to state 39
    return     go to state 40
    expr       go to state 41
    binop      go to state 42
    unop       go to state 43
    allocator  go to state 44
    callexprs  go to state 45
    call       go to state 46
    variable   go to state 47
    constant   go to state 48


state 129

   11 structdef: TOK_STRUCT TOK_IDENT '{' '}' .

    $default  reduce using rule 11 (structdef)


state 130

    8 structhead: '{' fielddecl .

    $default  reduce using rule 8 (structhead)


state 131

   12 fielddecl: basetype . TOK_IDENT ';'
   13          | basetype . TOK_ARRAY TOK_IDENT ';'

    TOK_ARRAY  shift, and go to state 146
    TOK_IDENT  shift, and go to state 147


state 132

   10 structdef: TOK_STRUCT TOK_IDENT structhead '}' .

    $default  reduce using rule 10 (structdef)


state 133

    9 structhead: structhead fielddecl .

    $default  reduce using rule 9 (structhead)


state 134

   52 binop: expr . '+' expr
   53      | expr . '-' expr
   54      | expr . '*' expr
   55      | expr . '/' expr
   56      | expr . TOK_LT expr
   57      | expr . TOK_GT expr
   58      | expr . TOK_LE expr
   59      | expr . TOK_GE expr
   60      | expr . '=' expr
   61      | expr . TOK_EQ expr
   62      | expr . TOK_NE expr
   63      | expr . '%' expr
   70 allocator: TOK_NEW TOK_STRING '(' expr . ')'
   77 variable: expr . '[' expr ']'
   78         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 77
    TOK_NE  shift, and go to state 78
    TOK_LT  shift, and go to state 79
    TOK_LE  shift, and go to state 80
    TOK_GT  shift, and go to state 81
    TOK_GE  shift, and go to state 82
    '='     shift, and go to state 83
    '+'     shift, and go to state 84
    '-'     shift, and go to state 85
    '*'     shift, and go to state 86
    '/'     shift, and go to state 87
    '%'     shift, and go to state 88
    '['     shift, and go to state 89
    '.'     shift, and go to state 90
    ')'     shift, and go to state 148


state 135

   69 allocator: TOK_NEW TOK_IDENT '(' ')' .

    $default  reduce using rule 69 (allocator)


state 136

   52 binop: expr . '+' expr
   53      | expr . '-' expr
   54      | expr . '*' expr
   55      | expr . '/' expr
   56      | expr . TOK_LT expr
   57      | expr . TOK_GT expr
   58      | expr . TOK_LE expr
   59      | expr . TOK_GE expr
   60      | expr . '=' expr
   61      | expr . TOK_EQ expr
   62      | expr . TOK_NE expr
   63      | expr . '%' expr
   71 allocator: TOK_NEW basetype '[' expr . ']'
   77 variable: expr . '[' expr ']'
   78         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 77
    TOK_NE  shift, and go to state 78
    TOK_LT  shift, and go to state 79
    TOK_LE  shift, and go to state 80
    TOK_GT  shift, and go to state 81
    TOK_GE  shift, and go to state 82
    '='     shift, and go to state 83
    '+'     shift, and go to state 84
    '-'     shift, and go to state 85
    '*'     shift, and go to state 86
    '/'     shift, and go to state 87
    '%'     shift, and go to state 88
    '['     shift, and go to state 89
    '.'     shift, and go to state 90
    ']'     shift, and go to state 149


state 137

   39 vardecl: identdecl '=' expr ';' .

    $default  reduce using rule 39 (vardecl)


state 138

   25 function: identdecl '(' ')' ';' .

    $default  reduce using rule 25 (function)


state 139

   24 function: identdecl '(' ')' block .

    $default  reduce using rule 24 (function)


state 140

   21 funchead: funchead ',' identdecl .

    $default  reduce using rule 21 (funchead)


state 141

   23 function: identdecl funchead ')' ';' .

    $default  reduce using rule 23 (function)


state 142

   22 function: identdecl funchead ')' block .

    $default  reduce using rule 22 (function)


state 143

   77 variable: expr '[' expr ']' .

    $default  reduce using rule 77 (variable)


state 144

   41 ifelse: TOK_IF '(' expr ')' statement . TOK_ELSE statement
   42       | TOK_IF '(' expr ')' statement .

    TOK_ELSE  shift, and go to state 150

    $default  reduce using rule 42 (ifelse)


state 145

   40 while: TOK_WHILE '(' expr ')' statement .

    $default  reduce using rule 40 (while)


state 146

   13 fielddecl: basetype TOK_ARRAY . TOK_IDENT ';'

    TOK_IDENT  shift, and go to state 151


state 147

   12 fielddecl: basetype TOK_IDENT . ';'

    ';'  shift, and go to state 152


state 148

   70 allocator: TOK_NEW TOK_STRING '(' expr ')' .

    $default  reduce using rule 70 (allocator)


state 149

   71 allocator: TOK_NEW basetype '[' expr ']' .

    $default  reduce using rule 71 (allocator)


state 150

   41 ifelse: TOK_IF '(' expr ')' statement TOK_ELSE . statement

    TOK_VOID       shift, and go to state 5
    TOK_BOOL       shift, and go to state 6
    TOK_CHAR       shift, and go to state 7
    TOK_INT        shift, and go to state 8
    TOK_STRING     shift, and go to state 9
    TOK_IF         shift, and go to state 10
    TOK_WHILE      shift, and go to state 11
    TOK_RETURN     shift, and go to state 12
    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 18
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27
    ';'            shift, and go to state 28
    '{'            shift, and go to state 29

    basetype   go to state 31
    identdecl  go to state 68
    blockhead  go to state 34
    block      go to state 35
    statement  go to state 153
    vardecl    go to state 37
    while      go to state 38
    ifelse     go to state 39
    return     go to state 40
    expr       go to state 41
    binop      go to state 42
    unop       go to state 43
    allocator  go to state 44
    callexprs  go to state 45
    call       go to state 46
    variable   go to state 47
    constant   go to state 48


state 151

   13 fielddecl: basetype TOK_ARRAY TOK_IDENT . ';'

    ';'  shift, and go to state 154


state 152

   12 fielddecl: basetype TOK_IDENT ';' .

    $default  reduce using rule 12 (fielddecl)


state 153

   41 ifelse: TOK_IF '(' expr ')' statement TOK_ELSE statement .

    $default  reduce using rule 41 (ifelse)


state 154

   13 fielddecl: basetype TOK_ARRAY TOK_IDENT ';' .

    $default  reduce using rule 13 (fielddecl)
