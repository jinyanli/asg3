Terminals unused in grammar

   TOK_BLOCK
   TOK_CALL
   TOK_IFELSE
   TOK_INITDECL
   TOK_POS
   TOK_NEG
   TOK_NEWARRAY
   TOK_TYPEID
   TOK_FIELD
   TOK_ROOT
   TOK_FIELDHEAD
   TOK_INDEX
   TOK_NEWSTRING
   TOK_RETURNVOID
   TOK_DECLID
   TOK_FUNCTION
   TOK_VARDECL
   TOK_PARAMLIST
   TOK_PROTOTYPE


State 59 conflicts: 1 reduce/reduce
State 61 conflicts: 2 shift/reduce
State 63 conflicts: 2 shift/reduce
State 64 conflicts: 2 shift/reduce
State 65 conflicts: 2 shift/reduce
State 66 conflicts: 2 shift/reduce
State 67 conflicts: 2 shift/reduce
State 79 conflicts: 1 shift/reduce
State 116 conflicts: 2 shift/reduce
State 117 conflicts: 2 shift/reduce
State 118 conflicts: 2 shift/reduce
State 119 conflicts: 2 shift/reduce
State 120 conflicts: 2 shift/reduce
State 121 conflicts: 2 shift/reduce
State 122 conflicts: 2 shift/reduce
State 123 conflicts: 2 shift/reduce
State 124 conflicts: 2 shift/reduce
State 125 conflicts: 2 shift/reduce
State 126 conflicts: 2 shift/reduce
State 127 conflicts: 2 shift/reduce
State 139 conflicts: 18 reduce/reduce


Grammar

    0 $accept: start $end

    1 start: program

    2 program: program structdef
    3        | program function
    4        | program statement
    5        | program error '}'
    6        | program error ';'
    7        | /* empty */

    8 fields: '{' fielddecl
    9       | fields fielddecl

   10 structdef: TOK_STRUCT TOK_IDENT fields '}'
   11          | TOK_STRUCT TOK_IDENT '{' '}'

   12 fielddecl: basetype TOK_IDENT ';'
   13          | basetype TOK_ARRAY TOK_IDENT ';'

   14 basetype: TOK_VOID
   15         | TOK_BOOL
   16         | TOK_CHAR
   17         | TOK_INT
   18         | TOK_STRING
   19         | TOK_IDENT

   20 funchead: '(' identdecl
   21         | funchead ',' identdecl

   22 function: identdecl funchead ')' block
   23         | identdecl funchead ')' ';'
   24         | identdecl '(' ')' block
   25         | identdecl '(' ')' ';'

   26 identdecl: basetype TOK_IDENT
   27          | basetype TOK_ARRAY TOK_IDENT

   28 blocklist: blocklist statement
   29          | '{' statement

   30 block: blocklist '}'
   31      | '{' '}'

   32 statement: block
   33          | vardecl
   34          | while
   35          | ifelse
   36          | return
   37          | expr ';'
   38          | ';'

   39 vardecl: identdecl '=' expr ';'

   40 while: TOK_WHILE '(' expr ')' statement

   41 ifelse: ifstart statement
   42       | ifstart statement TOK_ELSE statement

   43 ifstart: TOK_IF '(' expr ')'

   44 return: TOK_RETURN ';'
   45       | TOK_RETURN expr ';'

   46 expr: binop
   47     | unop
   48     | allocator
   49     | call
   50     | '(' expr ')'
   51     | variable
   52     | constant

   53 binop: expr '+' expr
   54      | expr '-' expr
   55      | expr '*' expr
   56      | expr '/' expr
   57      | expr '=' expr
   58      | expr TOK_LT expr
   59      | expr TOK_GT expr
   60      | expr TOK_LE expr
   61      | expr TOK_GE expr
   62      | expr '%' expr
   63      | expr TOK_EQ expr
   64      | expr TOK_NE expr

   65 unop: '+' expr
   66     | '-' expr
   67     | '!' expr
   68     | TOK_NEW expr
   69     | TOK_CHR expr
   70     | TOK_ORD expr

   71 allocator: TOK_NEW TOK_IDENT '(' ')'
   72          | TOK_NEW TOK_STRING '(' expr ')'
   73          | TOK_NEW basetype '[' expr ']'

   74 callexprs: TOK_IDENT '(' expr
   75          | callexprs ',' expr

   76 call: callexprs ')'
   77     | TOK_IDENT '(' ')'

   78 variable: TOK_IDENT
   79         | expr '[' expr ']'
   80         | expr '.' TOK_IDENT

   81 constant: TOK_INTCON
   82         | TOK_CHARCON
   83         | TOK_STRINGCON
   84         | TOK_FALSE
   85         | TOK_TRUE
   86         | TOK_NULL


Terminals, with rules where they appear

$end (0) 0
'!' (33) 67
'%' (37) 62
'(' (40) 20 24 25 40 43 50 71 72 74 77
')' (41) 22 23 24 25 40 43 50 71 72 76 77
'*' (42) 55
'+' (43) 53 65
',' (44) 21 75
'-' (45) 54 66
'.' (46) 80
'/' (47) 56
';' (59) 6 12 13 23 25 37 38 39 44 45
'=' (61) 39 57
'[' (91) 73 79
']' (93) 73 79
'{' (123) 8 11 29 31
'}' (125) 5 10 11 30 31
error (256) 5 6
TOK_VOID (258) 14
TOK_BOOL (259) 15
TOK_CHAR (260) 16
TOK_INT (261) 17
TOK_STRING (262) 18 72
TOK_IF (263) 43
TOK_ELSE (264) 42
TOK_WHILE (265) 40
TOK_RETURN (266) 44 45
TOK_STRUCT (267) 10 11
TOK_FALSE (268) 84
TOK_TRUE (269) 85
TOK_NULL (270) 86
TOK_NEW (271) 68 71 72 73
TOK_ARRAY (272) 13 27
TOK_EQ (273) 63
TOK_NE (274) 64
TOK_LT (275) 58
TOK_LE (276) 60
TOK_GT (277) 59
TOK_GE (278) 61
TOK_IDENT (279) 10 11 12 13 19 26 27 71 74 77 78 80
TOK_INTCON (280) 81
TOK_CHARCON (281) 82
TOK_STRINGCON (282) 83
TOK_BLOCK (283)
TOK_CALL (284)
TOK_IFELSE (285)
TOK_INITDECL (286)
TOK_POS (287)
TOK_NEG (288)
TOK_NEWARRAY (289)
TOK_TYPEID (290)
TOK_FIELD (291)
TOK_ORD (292) 70
TOK_CHR (293) 69
TOK_ROOT (294)
TOK_FIELDHEAD (295)
TOK_INDEX (296)
TOK_NEWSTRING (297)
TOK_RETURNVOID (298)
TOK_DECLID (299)
TOK_FUNCTION (300)
TOK_VARDECL (301)
TOK_PARAMLIST (302)
TOK_PROTOTYPE (303)


Nonterminals, with rules where they appear

$accept (65)
    on left: 0
start (66)
    on left: 1, on right: 0
program (67)
    on left: 2 3 4 5 6 7, on right: 1 2 3 4 5 6
fields (68)
    on left: 8 9, on right: 9 10
structdef (69)
    on left: 10 11, on right: 2
fielddecl (70)
    on left: 12 13, on right: 8 9
basetype (71)
    on left: 14 15 16 17 18 19, on right: 12 13 26 27 73
funchead (72)
    on left: 20 21, on right: 21 22 23
function (73)
    on left: 22 23 24 25, on right: 3
identdecl (74)
    on left: 26 27, on right: 20 21 22 23 24 25 39
blocklist (75)
    on left: 28 29, on right: 28 30
block (76)
    on left: 30 31, on right: 22 24 32
statement (77)
    on left: 32 33 34 35 36 37 38, on right: 4 28 29 40 41 42
vardecl (78)
    on left: 39, on right: 33
while (79)
    on left: 40, on right: 34
ifelse (80)
    on left: 41 42, on right: 35
ifstart (81)
    on left: 43, on right: 41 42
return (82)
    on left: 44 45, on right: 36
expr (83)
    on left: 46 47 48 49 50 51 52, on right: 37 39 40 43 45 50 53 54
    55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 72 73 74 75 79
    80
binop (84)
    on left: 53 54 55 56 57 58 59 60 61 62 63 64, on right: 46
unop (85)
    on left: 65 66 67 68 69 70, on right: 47
allocator (86)
    on left: 71 72 73, on right: 48
callexprs (87)
    on left: 74 75, on right: 75 76
call (88)
    on left: 76 77, on right: 49
variable (89)
    on left: 78 79 80, on right: 51
constant (90)
    on left: 81 82 83 84 85 86, on right: 52


state 0

    0 $accept: . start $end

    $default  reduce using rule 7 (program)

    start    go to state 1
    program  go to state 2


state 1

    0 $accept: start . $end

    $end  shift, and go to state 3


state 2

    1 start: program .
    2 program: program . structdef
    3        | program . function
    4        | program . statement
    5        | program . error '}'
    6        | program . error ';'

    error          shift, and go to state 4
    TOK_VOID       shift, and go to state 5
    TOK_BOOL       shift, and go to state 6
    TOK_CHAR       shift, and go to state 7
    TOK_INT        shift, and go to state 8
    TOK_STRING     shift, and go to state 9
    TOK_IF         shift, and go to state 10
    TOK_WHILE      shift, and go to state 11
    TOK_RETURN     shift, and go to state 12
    TOK_STRUCT     shift, and go to state 13
    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 18
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27
    ';'            shift, and go to state 28
    '{'            shift, and go to state 29

    $end  reduce using rule 1 (start)

    structdef  go to state 30
    basetype   go to state 31
    function   go to state 32
    identdecl  go to state 33
    blocklist  go to state 34
    block      go to state 35
    statement  go to state 36
    vardecl    go to state 37
    while      go to state 38
    ifelse     go to state 39
    ifstart    go to state 40
    return     go to state 41
    expr       go to state 42
    binop      go to state 43
    unop       go to state 44
    allocator  go to state 45
    callexprs  go to state 46
    call       go to state 47
    variable   go to state 48
    constant   go to state 49


state 3

    0 $accept: start $end .

    $default  accept


state 4

    5 program: program error . '}'
    6        | program error . ';'

    '}'  shift, and go to state 50
    ';'  shift, and go to state 51


state 5

   14 basetype: TOK_VOID .

    $default  reduce using rule 14 (basetype)


state 6

   15 basetype: TOK_BOOL .

    $default  reduce using rule 15 (basetype)


state 7

   16 basetype: TOK_CHAR .

    $default  reduce using rule 16 (basetype)


state 8

   17 basetype: TOK_INT .

    $default  reduce using rule 17 (basetype)


state 9

   18 basetype: TOK_STRING .

    $default  reduce using rule 18 (basetype)


state 10

   43 ifstart: TOK_IF . '(' expr ')'

    '('  shift, and go to state 52


state 11

   40 while: TOK_WHILE . '(' expr ')' statement

    '('  shift, and go to state 53


state 12

   44 return: TOK_RETURN . ';'
   45       | TOK_RETURN . expr ';'

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 54
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27
    ';'            shift, and go to state 55

    expr       go to state 56
    binop      go to state 43
    unop       go to state 44
    allocator  go to state 45
    callexprs  go to state 46
    call       go to state 47
    variable   go to state 48
    constant   go to state 49


state 13

   10 structdef: TOK_STRUCT . TOK_IDENT fields '}'
   11          | TOK_STRUCT . TOK_IDENT '{' '}'

    TOK_IDENT  shift, and go to state 57


state 14

   84 constant: TOK_FALSE .

    $default  reduce using rule 84 (constant)


state 15

   85 constant: TOK_TRUE .

    $default  reduce using rule 85 (constant)


state 16

   86 constant: TOK_NULL .

    $default  reduce using rule 86 (constant)


state 17

   68 unop: TOK_NEW . expr
   71 allocator: TOK_NEW . TOK_IDENT '(' ')'
   72          | TOK_NEW . TOK_STRING '(' expr ')'
   73          | TOK_NEW . basetype '[' expr ']'

    TOK_VOID       shift, and go to state 5
    TOK_BOOL       shift, and go to state 6
    TOK_CHAR       shift, and go to state 7
    TOK_INT        shift, and go to state 8
    TOK_STRING     shift, and go to state 58
    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 59
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27

    basetype   go to state 60
    expr       go to state 61
    binop      go to state 43
    unop       go to state 44
    allocator  go to state 45
    callexprs  go to state 46
    call       go to state 47
    variable   go to state 48
    constant   go to state 49


state 18

   19 basetype: TOK_IDENT .
   74 callexprs: TOK_IDENT . '(' expr
   77 call: TOK_IDENT . '(' ')'
   78 variable: TOK_IDENT .

    '('  shift, and go to state 62

    TOK_ARRAY  reduce using rule 19 (basetype)
    TOK_IDENT  reduce using rule 19 (basetype)
    $default   reduce using rule 78 (variable)


state 19

   81 constant: TOK_INTCON .

    $default  reduce using rule 81 (constant)


state 20

   82 constant: TOK_CHARCON .

    $default  reduce using rule 82 (constant)


state 21

   83 constant: TOK_STRINGCON .

    $default  reduce using rule 83 (constant)


state 22

   70 unop: TOK_ORD . expr

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 54
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27

    expr       go to state 63
    binop      go to state 43
    unop       go to state 44
    allocator  go to state 45
    callexprs  go to state 46
    call       go to state 47
    variable   go to state 48
    constant   go to state 49


state 23

   69 unop: TOK_CHR . expr

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 54
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27

    expr       go to state 64
    binop      go to state 43
    unop       go to state 44
    allocator  go to state 45
    callexprs  go to state 46
    call       go to state 47
    variable   go to state 48
    constant   go to state 49


state 24

   65 unop: '+' . expr

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 54
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27

    expr       go to state 65
    binop      go to state 43
    unop       go to state 44
    allocator  go to state 45
    callexprs  go to state 46
    call       go to state 47
    variable   go to state 48
    constant   go to state 49


state 25

   66 unop: '-' . expr

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 54
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27

    expr       go to state 66
    binop      go to state 43
    unop       go to state 44
    allocator  go to state 45
    callexprs  go to state 46
    call       go to state 47
    variable   go to state 48
    constant   go to state 49


state 26

   67 unop: '!' . expr

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 54
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27

    expr       go to state 67
    binop      go to state 43
    unop       go to state 44
    allocator  go to state 45
    callexprs  go to state 46
    call       go to state 47
    variable   go to state 48
    constant   go to state 49


state 27

   50 expr: '(' . expr ')'

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 54
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27

    expr       go to state 68
    binop      go to state 43
    unop       go to state 44
    allocator  go to state 45
    callexprs  go to state 46
    call       go to state 47
    variable   go to state 48
    constant   go to state 49


state 28

   38 statement: ';' .

    $default  reduce using rule 38 (statement)


state 29

   29 blocklist: '{' . statement
   31 block: '{' . '}'

    TOK_VOID       shift, and go to state 5
    TOK_BOOL       shift, and go to state 6
    TOK_CHAR       shift, and go to state 7
    TOK_INT        shift, and go to state 8
    TOK_STRING     shift, and go to state 9
    TOK_IF         shift, and go to state 10
    TOK_WHILE      shift, and go to state 11
    TOK_RETURN     shift, and go to state 12
    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 18
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27
    '}'            shift, and go to state 69
    ';'            shift, and go to state 28
    '{'            shift, and go to state 29

    basetype   go to state 31
    identdecl  go to state 70
    blocklist  go to state 34
    block      go to state 35
    statement  go to state 71
    vardecl    go to state 37
    while      go to state 38
    ifelse     go to state 39
    ifstart    go to state 40
    return     go to state 41
    expr       go to state 42
    binop      go to state 43
    unop       go to state 44
    allocator  go to state 45
    callexprs  go to state 46
    call       go to state 47
    variable   go to state 48
    constant   go to state 49


state 30

    2 program: program structdef .

    $default  reduce using rule 2 (program)


state 31

   26 identdecl: basetype . TOK_IDENT
   27          | basetype . TOK_ARRAY TOK_IDENT

    TOK_ARRAY  shift, and go to state 72
    TOK_IDENT  shift, and go to state 73


state 32

    3 program: program function .

    $default  reduce using rule 3 (program)


state 33

   22 function: identdecl . funchead ')' block
   23         | identdecl . funchead ')' ';'
   24         | identdecl . '(' ')' block
   25         | identdecl . '(' ')' ';'
   39 vardecl: identdecl . '=' expr ';'

    '='  shift, and go to state 74
    '('  shift, and go to state 75

    funchead  go to state 76


state 34

   28 blocklist: blocklist . statement
   30 block: blocklist . '}'

    TOK_VOID       shift, and go to state 5
    TOK_BOOL       shift, and go to state 6
    TOK_CHAR       shift, and go to state 7
    TOK_INT        shift, and go to state 8
    TOK_STRING     shift, and go to state 9
    TOK_IF         shift, and go to state 10
    TOK_WHILE      shift, and go to state 11
    TOK_RETURN     shift, and go to state 12
    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 18
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27
    '}'            shift, and go to state 77
    ';'            shift, and go to state 28
    '{'            shift, and go to state 29

    basetype   go to state 31
    identdecl  go to state 70
    blocklist  go to state 34
    block      go to state 35
    statement  go to state 78
    vardecl    go to state 37
    while      go to state 38
    ifelse     go to state 39
    ifstart    go to state 40
    return     go to state 41
    expr       go to state 42
    binop      go to state 43
    unop       go to state 44
    allocator  go to state 45
    callexprs  go to state 46
    call       go to state 47
    variable   go to state 48
    constant   go to state 49


state 35

   32 statement: block .

    $default  reduce using rule 32 (statement)


state 36

    4 program: program statement .

    $default  reduce using rule 4 (program)


state 37

   33 statement: vardecl .

    $default  reduce using rule 33 (statement)


state 38

   34 statement: while .

    $default  reduce using rule 34 (statement)


state 39

   35 statement: ifelse .

    $default  reduce using rule 35 (statement)


state 40

   41 ifelse: ifstart . statement
   42       | ifstart . statement TOK_ELSE statement

    TOK_VOID       shift, and go to state 5
    TOK_BOOL       shift, and go to state 6
    TOK_CHAR       shift, and go to state 7
    TOK_INT        shift, and go to state 8
    TOK_STRING     shift, and go to state 9
    TOK_IF         shift, and go to state 10
    TOK_WHILE      shift, and go to state 11
    TOK_RETURN     shift, and go to state 12
    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 18
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27
    ';'            shift, and go to state 28
    '{'            shift, and go to state 29

    basetype   go to state 31
    identdecl  go to state 70
    blocklist  go to state 34
    block      go to state 35
    statement  go to state 79
    vardecl    go to state 37
    while      go to state 38
    ifelse     go to state 39
    ifstart    go to state 40
    return     go to state 41
    expr       go to state 42
    binop      go to state 43
    unop       go to state 44
    allocator  go to state 45
    callexprs  go to state 46
    call       go to state 47
    variable   go to state 48
    constant   go to state 49


state 41

   36 statement: return .

    $default  reduce using rule 36 (statement)


state 42

   37 statement: expr . ';'
   53 binop: expr . '+' expr
   54      | expr . '-' expr
   55      | expr . '*' expr
   56      | expr . '/' expr
   57      | expr . '=' expr
   58      | expr . TOK_LT expr
   59      | expr . TOK_GT expr
   60      | expr . TOK_LE expr
   61      | expr . TOK_GE expr
   62      | expr . '%' expr
   63      | expr . TOK_EQ expr
   64      | expr . TOK_NE expr
   79 variable: expr . '[' expr ']'
   80         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 80
    TOK_NE  shift, and go to state 81
    TOK_LT  shift, and go to state 82
    TOK_LE  shift, and go to state 83
    TOK_GT  shift, and go to state 84
    TOK_GE  shift, and go to state 85
    '='     shift, and go to state 86
    '+'     shift, and go to state 87
    '-'     shift, and go to state 88
    '*'     shift, and go to state 89
    '/'     shift, and go to state 90
    '%'     shift, and go to state 91
    ';'     shift, and go to state 92
    '['     shift, and go to state 93
    '.'     shift, and go to state 94


state 43

   46 expr: binop .

    $default  reduce using rule 46 (expr)


state 44

   47 expr: unop .

    $default  reduce using rule 47 (expr)


state 45

   48 expr: allocator .

    $default  reduce using rule 48 (expr)


state 46

   75 callexprs: callexprs . ',' expr
   76 call: callexprs . ')'

    ')'  shift, and go to state 95
    ','  shift, and go to state 96


state 47

   49 expr: call .

    $default  reduce using rule 49 (expr)


state 48

   51 expr: variable .

    $default  reduce using rule 51 (expr)


state 49

   52 expr: constant .

    $default  reduce using rule 52 (expr)


state 50

    5 program: program error '}' .

    $default  reduce using rule 5 (program)


state 51

    6 program: program error ';' .

    $default  reduce using rule 6 (program)


state 52

   43 ifstart: TOK_IF '(' . expr ')'

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 54
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27

    expr       go to state 97
    binop      go to state 43
    unop       go to state 44
    allocator  go to state 45
    callexprs  go to state 46
    call       go to state 47
    variable   go to state 48
    constant   go to state 49


state 53

   40 while: TOK_WHILE '(' . expr ')' statement

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 54
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27

    expr       go to state 98
    binop      go to state 43
    unop       go to state 44
    allocator  go to state 45
    callexprs  go to state 46
    call       go to state 47
    variable   go to state 48
    constant   go to state 49


state 54

   74 callexprs: TOK_IDENT . '(' expr
   77 call: TOK_IDENT . '(' ')'
   78 variable: TOK_IDENT .

    '('  shift, and go to state 62

    $default  reduce using rule 78 (variable)


state 55

   44 return: TOK_RETURN ';' .

    $default  reduce using rule 44 (return)


state 56

   45 return: TOK_RETURN expr . ';'
   53 binop: expr . '+' expr
   54      | expr . '-' expr
   55      | expr . '*' expr
   56      | expr . '/' expr
   57      | expr . '=' expr
   58      | expr . TOK_LT expr
   59      | expr . TOK_GT expr
   60      | expr . TOK_LE expr
   61      | expr . TOK_GE expr
   62      | expr . '%' expr
   63      | expr . TOK_EQ expr
   64      | expr . TOK_NE expr
   79 variable: expr . '[' expr ']'
   80         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 80
    TOK_NE  shift, and go to state 81
    TOK_LT  shift, and go to state 82
    TOK_LE  shift, and go to state 83
    TOK_GT  shift, and go to state 84
    TOK_GE  shift, and go to state 85
    '='     shift, and go to state 86
    '+'     shift, and go to state 87
    '-'     shift, and go to state 88
    '*'     shift, and go to state 89
    '/'     shift, and go to state 90
    '%'     shift, and go to state 91
    ';'     shift, and go to state 99
    '['     shift, and go to state 93
    '.'     shift, and go to state 94


state 57

   10 structdef: TOK_STRUCT TOK_IDENT . fields '}'
   11          | TOK_STRUCT TOK_IDENT . '{' '}'

    '{'  shift, and go to state 100

    fields  go to state 101


state 58

   18 basetype: TOK_STRING .
   72 allocator: TOK_NEW TOK_STRING . '(' expr ')'

    '('  shift, and go to state 102

    $default  reduce using rule 18 (basetype)


state 59

   19 basetype: TOK_IDENT .
   71 allocator: TOK_NEW TOK_IDENT . '(' ')'
   74 callexprs: TOK_IDENT . '(' expr
   77 call: TOK_IDENT . '(' ')'
   78 variable: TOK_IDENT .

    '('  shift, and go to state 103

    '['       reduce using rule 19 (basetype)
    '['       [reduce using rule 78 (variable)]
    $default  reduce using rule 78 (variable)


state 60

   73 allocator: TOK_NEW basetype . '[' expr ']'

    '['  shift, and go to state 104


state 61

   53 binop: expr . '+' expr
   54      | expr . '-' expr
   55      | expr . '*' expr
   56      | expr . '/' expr
   57      | expr . '=' expr
   58      | expr . TOK_LT expr
   59      | expr . TOK_GT expr
   60      | expr . TOK_LE expr
   61      | expr . TOK_GE expr
   62      | expr . '%' expr
   63      | expr . TOK_EQ expr
   64      | expr . TOK_NE expr
   68 unop: TOK_NEW expr .
   79 variable: expr . '[' expr ']'
   80         | expr . '.' TOK_IDENT

    '['  shift, and go to state 93
    '.'  shift, and go to state 94

    '['       [reduce using rule 68 (unop)]
    '.'       [reduce using rule 68 (unop)]
    $default  reduce using rule 68 (unop)


state 62

   74 callexprs: TOK_IDENT '(' . expr
   77 call: TOK_IDENT '(' . ')'

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 54
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27
    ')'            shift, and go to state 105

    expr       go to state 106
    binop      go to state 43
    unop       go to state 44
    allocator  go to state 45
    callexprs  go to state 46
    call       go to state 47
    variable   go to state 48
    constant   go to state 49


state 63

   53 binop: expr . '+' expr
   54      | expr . '-' expr
   55      | expr . '*' expr
   56      | expr . '/' expr
   57      | expr . '=' expr
   58      | expr . TOK_LT expr
   59      | expr . TOK_GT expr
   60      | expr . TOK_LE expr
   61      | expr . TOK_GE expr
   62      | expr . '%' expr
   63      | expr . TOK_EQ expr
   64      | expr . TOK_NE expr
   70 unop: TOK_ORD expr .
   79 variable: expr . '[' expr ']'
   80         | expr . '.' TOK_IDENT

    '['  shift, and go to state 93
    '.'  shift, and go to state 94

    '['       [reduce using rule 70 (unop)]
    '.'       [reduce using rule 70 (unop)]
    $default  reduce using rule 70 (unop)


state 64

   53 binop: expr . '+' expr
   54      | expr . '-' expr
   55      | expr . '*' expr
   56      | expr . '/' expr
   57      | expr . '=' expr
   58      | expr . TOK_LT expr
   59      | expr . TOK_GT expr
   60      | expr . TOK_LE expr
   61      | expr . TOK_GE expr
   62      | expr . '%' expr
   63      | expr . TOK_EQ expr
   64      | expr . TOK_NE expr
   69 unop: TOK_CHR expr .
   79 variable: expr . '[' expr ']'
   80         | expr . '.' TOK_IDENT

    '['  shift, and go to state 93
    '.'  shift, and go to state 94

    '['       [reduce using rule 69 (unop)]
    '.'       [reduce using rule 69 (unop)]
    $default  reduce using rule 69 (unop)


state 65

   53 binop: expr . '+' expr
   54      | expr . '-' expr
   55      | expr . '*' expr
   56      | expr . '/' expr
   57      | expr . '=' expr
   58      | expr . TOK_LT expr
   59      | expr . TOK_GT expr
   60      | expr . TOK_LE expr
   61      | expr . TOK_GE expr
   62      | expr . '%' expr
   63      | expr . TOK_EQ expr
   64      | expr . TOK_NE expr
   65 unop: '+' expr .
   79 variable: expr . '[' expr ']'
   80         | expr . '.' TOK_IDENT

    '*'  shift, and go to state 89
    '/'  shift, and go to state 90
    '%'  shift, and go to state 91
    '['  shift, and go to state 93
    '.'  shift, and go to state 94

    '['       [reduce using rule 65 (unop)]
    '.'       [reduce using rule 65 (unop)]
    $default  reduce using rule 65 (unop)


state 66

   53 binop: expr . '+' expr
   54      | expr . '-' expr
   55      | expr . '*' expr
   56      | expr . '/' expr
   57      | expr . '=' expr
   58      | expr . TOK_LT expr
   59      | expr . TOK_GT expr
   60      | expr . TOK_LE expr
   61      | expr . TOK_GE expr
   62      | expr . '%' expr
   63      | expr . TOK_EQ expr
   64      | expr . TOK_NE expr
   66 unop: '-' expr .
   79 variable: expr . '[' expr ']'
   80         | expr . '.' TOK_IDENT

    '*'  shift, and go to state 89
    '/'  shift, and go to state 90
    '%'  shift, and go to state 91
    '['  shift, and go to state 93
    '.'  shift, and go to state 94

    '['       [reduce using rule 66 (unop)]
    '.'       [reduce using rule 66 (unop)]
    $default  reduce using rule 66 (unop)


state 67

   53 binop: expr . '+' expr
   54      | expr . '-' expr
   55      | expr . '*' expr
   56      | expr . '/' expr
   57      | expr . '=' expr
   58      | expr . TOK_LT expr
   59      | expr . TOK_GT expr
   60      | expr . TOK_LE expr
   61      | expr . TOK_GE expr
   62      | expr . '%' expr
   63      | expr . TOK_EQ expr
   64      | expr . TOK_NE expr
   67 unop: '!' expr .
   79 variable: expr . '[' expr ']'
   80         | expr . '.' TOK_IDENT

    '['  shift, and go to state 93
    '.'  shift, and go to state 94

    '['       [reduce using rule 67 (unop)]
    '.'       [reduce using rule 67 (unop)]
    $default  reduce using rule 67 (unop)


state 68

   50 expr: '(' expr . ')'
   53 binop: expr . '+' expr
   54      | expr . '-' expr
   55      | expr . '*' expr
   56      | expr . '/' expr
   57      | expr . '=' expr
   58      | expr . TOK_LT expr
   59      | expr . TOK_GT expr
   60      | expr . TOK_LE expr
   61      | expr . TOK_GE expr
   62      | expr . '%' expr
   63      | expr . TOK_EQ expr
   64      | expr . TOK_NE expr
   79 variable: expr . '[' expr ']'
   80         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 80
    TOK_NE  shift, and go to state 81
    TOK_LT  shift, and go to state 82
    TOK_LE  shift, and go to state 83
    TOK_GT  shift, and go to state 84
    TOK_GE  shift, and go to state 85
    '='     shift, and go to state 86
    '+'     shift, and go to state 87
    '-'     shift, and go to state 88
    '*'     shift, and go to state 89
    '/'     shift, and go to state 90
    '%'     shift, and go to state 91
    ')'     shift, and go to state 107
    '['     shift, and go to state 93
    '.'     shift, and go to state 94


state 69

   31 block: '{' '}' .

    $default  reduce using rule 31 (block)


state 70

   39 vardecl: identdecl . '=' expr ';'

    '='  shift, and go to state 74


state 71

   29 blocklist: '{' statement .

    $default  reduce using rule 29 (blocklist)


state 72

   27 identdecl: basetype TOK_ARRAY . TOK_IDENT

    TOK_IDENT  shift, and go to state 108


state 73

   26 identdecl: basetype TOK_IDENT .

    $default  reduce using rule 26 (identdecl)


state 74

   39 vardecl: identdecl '=' . expr ';'

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 54
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27

    expr       go to state 109
    binop      go to state 43
    unop       go to state 44
    allocator  go to state 45
    callexprs  go to state 46
    call       go to state 47
    variable   go to state 48
    constant   go to state 49


state 75

   20 funchead: '(' . identdecl
   24 function: identdecl '(' . ')' block
   25         | identdecl '(' . ')' ';'

    TOK_VOID    shift, and go to state 5
    TOK_BOOL    shift, and go to state 6
    TOK_CHAR    shift, and go to state 7
    TOK_INT     shift, and go to state 8
    TOK_STRING  shift, and go to state 9
    TOK_IDENT   shift, and go to state 110
    ')'         shift, and go to state 111

    basetype   go to state 31
    identdecl  go to state 112


state 76

   21 funchead: funchead . ',' identdecl
   22 function: identdecl funchead . ')' block
   23         | identdecl funchead . ')' ';'

    ')'  shift, and go to state 113
    ','  shift, and go to state 114


state 77

   30 block: blocklist '}' .

    $default  reduce using rule 30 (block)


state 78

   28 blocklist: blocklist statement .

    $default  reduce using rule 28 (blocklist)


state 79

   41 ifelse: ifstart statement .
   42       | ifstart statement . TOK_ELSE statement

    TOK_ELSE  shift, and go to state 115

    TOK_ELSE  [reduce using rule 41 (ifelse)]
    $default  reduce using rule 41 (ifelse)


state 80

   63 binop: expr TOK_EQ . expr

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 54
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27

    expr       go to state 116
    binop      go to state 43
    unop       go to state 44
    allocator  go to state 45
    callexprs  go to state 46
    call       go to state 47
    variable   go to state 48
    constant   go to state 49


state 81

   64 binop: expr TOK_NE . expr

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 54
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27

    expr       go to state 117
    binop      go to state 43
    unop       go to state 44
    allocator  go to state 45
    callexprs  go to state 46
    call       go to state 47
    variable   go to state 48
    constant   go to state 49


state 82

   58 binop: expr TOK_LT . expr

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 54
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27

    expr       go to state 118
    binop      go to state 43
    unop       go to state 44
    allocator  go to state 45
    callexprs  go to state 46
    call       go to state 47
    variable   go to state 48
    constant   go to state 49


state 83

   60 binop: expr TOK_LE . expr

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 54
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27

    expr       go to state 119
    binop      go to state 43
    unop       go to state 44
    allocator  go to state 45
    callexprs  go to state 46
    call       go to state 47
    variable   go to state 48
    constant   go to state 49


state 84

   59 binop: expr TOK_GT . expr

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 54
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27

    expr       go to state 120
    binop      go to state 43
    unop       go to state 44
    allocator  go to state 45
    callexprs  go to state 46
    call       go to state 47
    variable   go to state 48
    constant   go to state 49


state 85

   61 binop: expr TOK_GE . expr

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 54
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27

    expr       go to state 121
    binop      go to state 43
    unop       go to state 44
    allocator  go to state 45
    callexprs  go to state 46
    call       go to state 47
    variable   go to state 48
    constant   go to state 49


state 86

   57 binop: expr '=' . expr

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 54
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27

    expr       go to state 122
    binop      go to state 43
    unop       go to state 44
    allocator  go to state 45
    callexprs  go to state 46
    call       go to state 47
    variable   go to state 48
    constant   go to state 49


state 87

   53 binop: expr '+' . expr

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 54
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27

    expr       go to state 123
    binop      go to state 43
    unop       go to state 44
    allocator  go to state 45
    callexprs  go to state 46
    call       go to state 47
    variable   go to state 48
    constant   go to state 49


state 88

   54 binop: expr '-' . expr

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 54
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27

    expr       go to state 124
    binop      go to state 43
    unop       go to state 44
    allocator  go to state 45
    callexprs  go to state 46
    call       go to state 47
    variable   go to state 48
    constant   go to state 49


state 89

   55 binop: expr '*' . expr

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 54
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27

    expr       go to state 125
    binop      go to state 43
    unop       go to state 44
    allocator  go to state 45
    callexprs  go to state 46
    call       go to state 47
    variable   go to state 48
    constant   go to state 49


state 90

   56 binop: expr '/' . expr

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 54
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27

    expr       go to state 126
    binop      go to state 43
    unop       go to state 44
    allocator  go to state 45
    callexprs  go to state 46
    call       go to state 47
    variable   go to state 48
    constant   go to state 49


state 91

   62 binop: expr '%' . expr

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 54
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27

    expr       go to state 127
    binop      go to state 43
    unop       go to state 44
    allocator  go to state 45
    callexprs  go to state 46
    call       go to state 47
    variable   go to state 48
    constant   go to state 49


state 92

   37 statement: expr ';' .

    $default  reduce using rule 37 (statement)


state 93

   79 variable: expr '[' . expr ']'

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 54
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27

    expr       go to state 128
    binop      go to state 43
    unop       go to state 44
    allocator  go to state 45
    callexprs  go to state 46
    call       go to state 47
    variable   go to state 48
    constant   go to state 49


state 94

   80 variable: expr '.' . TOK_IDENT

    TOK_IDENT  shift, and go to state 129


state 95

   76 call: callexprs ')' .

    $default  reduce using rule 76 (call)


state 96

   75 callexprs: callexprs ',' . expr

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 54
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27

    expr       go to state 130
    binop      go to state 43
    unop       go to state 44
    allocator  go to state 45
    callexprs  go to state 46
    call       go to state 47
    variable   go to state 48
    constant   go to state 49


state 97

   43 ifstart: TOK_IF '(' expr . ')'
   53 binop: expr . '+' expr
   54      | expr . '-' expr
   55      | expr . '*' expr
   56      | expr . '/' expr
   57      | expr . '=' expr
   58      | expr . TOK_LT expr
   59      | expr . TOK_GT expr
   60      | expr . TOK_LE expr
   61      | expr . TOK_GE expr
   62      | expr . '%' expr
   63      | expr . TOK_EQ expr
   64      | expr . TOK_NE expr
   79 variable: expr . '[' expr ']'
   80         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 80
    TOK_NE  shift, and go to state 81
    TOK_LT  shift, and go to state 82
    TOK_LE  shift, and go to state 83
    TOK_GT  shift, and go to state 84
    TOK_GE  shift, and go to state 85
    '='     shift, and go to state 86
    '+'     shift, and go to state 87
    '-'     shift, and go to state 88
    '*'     shift, and go to state 89
    '/'     shift, and go to state 90
    '%'     shift, and go to state 91
    ')'     shift, and go to state 131
    '['     shift, and go to state 93
    '.'     shift, and go to state 94


state 98

   40 while: TOK_WHILE '(' expr . ')' statement
   53 binop: expr . '+' expr
   54      | expr . '-' expr
   55      | expr . '*' expr
   56      | expr . '/' expr
   57      | expr . '=' expr
   58      | expr . TOK_LT expr
   59      | expr . TOK_GT expr
   60      | expr . TOK_LE expr
   61      | expr . TOK_GE expr
   62      | expr . '%' expr
   63      | expr . TOK_EQ expr
   64      | expr . TOK_NE expr
   79 variable: expr . '[' expr ']'
   80         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 80
    TOK_NE  shift, and go to state 81
    TOK_LT  shift, and go to state 82
    TOK_LE  shift, and go to state 83
    TOK_GT  shift, and go to state 84
    TOK_GE  shift, and go to state 85
    '='     shift, and go to state 86
    '+'     shift, and go to state 87
    '-'     shift, and go to state 88
    '*'     shift, and go to state 89
    '/'     shift, and go to state 90
    '%'     shift, and go to state 91
    ')'     shift, and go to state 132
    '['     shift, and go to state 93
    '.'     shift, and go to state 94


state 99

   45 return: TOK_RETURN expr ';' .

    $default  reduce using rule 45 (return)


state 100

    8 fields: '{' . fielddecl
   11 structdef: TOK_STRUCT TOK_IDENT '{' . '}'

    TOK_VOID    shift, and go to state 5
    TOK_BOOL    shift, and go to state 6
    TOK_CHAR    shift, and go to state 7
    TOK_INT     shift, and go to state 8
    TOK_STRING  shift, and go to state 9
    TOK_IDENT   shift, and go to state 110
    '}'         shift, and go to state 133

    fielddecl  go to state 134
    basetype   go to state 135


state 101

    9 fields: fields . fielddecl
   10 structdef: TOK_STRUCT TOK_IDENT fields . '}'

    TOK_VOID    shift, and go to state 5
    TOK_BOOL    shift, and go to state 6
    TOK_CHAR    shift, and go to state 7
    TOK_INT     shift, and go to state 8
    TOK_STRING  shift, and go to state 9
    TOK_IDENT   shift, and go to state 110
    '}'         shift, and go to state 136

    fielddecl  go to state 137
    basetype   go to state 135


state 102

   72 allocator: TOK_NEW TOK_STRING '(' . expr ')'

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 54
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27

    expr       go to state 138
    binop      go to state 43
    unop       go to state 44
    allocator  go to state 45
    callexprs  go to state 46
    call       go to state 47
    variable   go to state 48
    constant   go to state 49


state 103

   71 allocator: TOK_NEW TOK_IDENT '(' . ')'
   74 callexprs: TOK_IDENT '(' . expr
   77 call: TOK_IDENT '(' . ')'

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 54
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27
    ')'            shift, and go to state 139

    expr       go to state 106
    binop      go to state 43
    unop       go to state 44
    allocator  go to state 45
    callexprs  go to state 46
    call       go to state 47
    variable   go to state 48
    constant   go to state 49


state 104

   73 allocator: TOK_NEW basetype '[' . expr ']'

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 54
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27

    expr       go to state 140
    binop      go to state 43
    unop       go to state 44
    allocator  go to state 45
    callexprs  go to state 46
    call       go to state 47
    variable   go to state 48
    constant   go to state 49


state 105

   77 call: TOK_IDENT '(' ')' .

    $default  reduce using rule 77 (call)


state 106

   53 binop: expr . '+' expr
   54      | expr . '-' expr
   55      | expr . '*' expr
   56      | expr . '/' expr
   57      | expr . '=' expr
   58      | expr . TOK_LT expr
   59      | expr . TOK_GT expr
   60      | expr . TOK_LE expr
   61      | expr . TOK_GE expr
   62      | expr . '%' expr
   63      | expr . TOK_EQ expr
   64      | expr . TOK_NE expr
   74 callexprs: TOK_IDENT '(' expr .
   79 variable: expr . '[' expr ']'
   80         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 80
    TOK_NE  shift, and go to state 81
    TOK_LT  shift, and go to state 82
    TOK_LE  shift, and go to state 83
    TOK_GT  shift, and go to state 84
    TOK_GE  shift, and go to state 85
    '='     shift, and go to state 86
    '+'     shift, and go to state 87
    '-'     shift, and go to state 88
    '*'     shift, and go to state 89
    '/'     shift, and go to state 90
    '%'     shift, and go to state 91
    '['     shift, and go to state 93
    '.'     shift, and go to state 94

    $default  reduce using rule 74 (callexprs)


state 107

   50 expr: '(' expr ')' .

    $default  reduce using rule 50 (expr)


state 108

   27 identdecl: basetype TOK_ARRAY TOK_IDENT .

    $default  reduce using rule 27 (identdecl)


state 109

   39 vardecl: identdecl '=' expr . ';'
   53 binop: expr . '+' expr
   54      | expr . '-' expr
   55      | expr . '*' expr
   56      | expr . '/' expr
   57      | expr . '=' expr
   58      | expr . TOK_LT expr
   59      | expr . TOK_GT expr
   60      | expr . TOK_LE expr
   61      | expr . TOK_GE expr
   62      | expr . '%' expr
   63      | expr . TOK_EQ expr
   64      | expr . TOK_NE expr
   79 variable: expr . '[' expr ']'
   80         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 80
    TOK_NE  shift, and go to state 81
    TOK_LT  shift, and go to state 82
    TOK_LE  shift, and go to state 83
    TOK_GT  shift, and go to state 84
    TOK_GE  shift, and go to state 85
    '='     shift, and go to state 86
    '+'     shift, and go to state 87
    '-'     shift, and go to state 88
    '*'     shift, and go to state 89
    '/'     shift, and go to state 90
    '%'     shift, and go to state 91
    ';'     shift, and go to state 141
    '['     shift, and go to state 93
    '.'     shift, and go to state 94


state 110

   19 basetype: TOK_IDENT .

    $default  reduce using rule 19 (basetype)


state 111

   24 function: identdecl '(' ')' . block
   25         | identdecl '(' ')' . ';'

    ';'  shift, and go to state 142
    '{'  shift, and go to state 29

    blocklist  go to state 34
    block      go to state 143


state 112

   20 funchead: '(' identdecl .

    $default  reduce using rule 20 (funchead)


state 113

   22 function: identdecl funchead ')' . block
   23         | identdecl funchead ')' . ';'

    ';'  shift, and go to state 144
    '{'  shift, and go to state 29

    blocklist  go to state 34
    block      go to state 145


state 114

   21 funchead: funchead ',' . identdecl

    TOK_VOID    shift, and go to state 5
    TOK_BOOL    shift, and go to state 6
    TOK_CHAR    shift, and go to state 7
    TOK_INT     shift, and go to state 8
    TOK_STRING  shift, and go to state 9
    TOK_IDENT   shift, and go to state 110

    basetype   go to state 31
    identdecl  go to state 146


state 115

   42 ifelse: ifstart statement TOK_ELSE . statement

    TOK_VOID       shift, and go to state 5
    TOK_BOOL       shift, and go to state 6
    TOK_CHAR       shift, and go to state 7
    TOK_INT        shift, and go to state 8
    TOK_STRING     shift, and go to state 9
    TOK_IF         shift, and go to state 10
    TOK_WHILE      shift, and go to state 11
    TOK_RETURN     shift, and go to state 12
    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 18
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27
    ';'            shift, and go to state 28
    '{'            shift, and go to state 29

    basetype   go to state 31
    identdecl  go to state 70
    blocklist  go to state 34
    block      go to state 35
    statement  go to state 147
    vardecl    go to state 37
    while      go to state 38
    ifelse     go to state 39
    ifstart    go to state 40
    return     go to state 41
    expr       go to state 42
    binop      go to state 43
    unop       go to state 44
    allocator  go to state 45
    callexprs  go to state 46
    call       go to state 47
    variable   go to state 48
    constant   go to state 49


state 116

   53 binop: expr . '+' expr
   54      | expr . '-' expr
   55      | expr . '*' expr
   56      | expr . '/' expr
   57      | expr . '=' expr
   58      | expr . TOK_LT expr
   59      | expr . TOK_GT expr
   60      | expr . TOK_LE expr
   61      | expr . TOK_GE expr
   62      | expr . '%' expr
   63      | expr . TOK_EQ expr
   63      | expr TOK_EQ expr .
   64      | expr . TOK_NE expr
   79 variable: expr . '[' expr ']'
   80         | expr . '.' TOK_IDENT

    '+'  shift, and go to state 87
    '-'  shift, and go to state 88
    '*'  shift, and go to state 89
    '/'  shift, and go to state 90
    '%'  shift, and go to state 91
    '['  shift, and go to state 93
    '.'  shift, and go to state 94

    '['       [reduce using rule 63 (binop)]
    '.'       [reduce using rule 63 (binop)]
    $default  reduce using rule 63 (binop)


state 117

   53 binop: expr . '+' expr
   54      | expr . '-' expr
   55      | expr . '*' expr
   56      | expr . '/' expr
   57      | expr . '=' expr
   58      | expr . TOK_LT expr
   59      | expr . TOK_GT expr
   60      | expr . TOK_LE expr
   61      | expr . TOK_GE expr
   62      | expr . '%' expr
   63      | expr . TOK_EQ expr
   64      | expr . TOK_NE expr
   64      | expr TOK_NE expr .
   79 variable: expr . '[' expr ']'
   80         | expr . '.' TOK_IDENT

    '+'  shift, and go to state 87
    '-'  shift, and go to state 88
    '*'  shift, and go to state 89
    '/'  shift, and go to state 90
    '%'  shift, and go to state 91
    '['  shift, and go to state 93
    '.'  shift, and go to state 94

    '['       [reduce using rule 64 (binop)]
    '.'       [reduce using rule 64 (binop)]
    $default  reduce using rule 64 (binop)


state 118

   53 binop: expr . '+' expr
   54      | expr . '-' expr
   55      | expr . '*' expr
   56      | expr . '/' expr
   57      | expr . '=' expr
   58      | expr . TOK_LT expr
   58      | expr TOK_LT expr .
   59      | expr . TOK_GT expr
   60      | expr . TOK_LE expr
   61      | expr . TOK_GE expr
   62      | expr . '%' expr
   63      | expr . TOK_EQ expr
   64      | expr . TOK_NE expr
   79 variable: expr . '[' expr ']'
   80         | expr . '.' TOK_IDENT

    '+'  shift, and go to state 87
    '-'  shift, and go to state 88
    '*'  shift, and go to state 89
    '/'  shift, and go to state 90
    '%'  shift, and go to state 91
    '['  shift, and go to state 93
    '.'  shift, and go to state 94

    '['       [reduce using rule 58 (binop)]
    '.'       [reduce using rule 58 (binop)]
    $default  reduce using rule 58 (binop)


state 119

   53 binop: expr . '+' expr
   54      | expr . '-' expr
   55      | expr . '*' expr
   56      | expr . '/' expr
   57      | expr . '=' expr
   58      | expr . TOK_LT expr
   59      | expr . TOK_GT expr
   60      | expr . TOK_LE expr
   60      | expr TOK_LE expr .
   61      | expr . TOK_GE expr
   62      | expr . '%' expr
   63      | expr . TOK_EQ expr
   64      | expr . TOK_NE expr
   79 variable: expr . '[' expr ']'
   80         | expr . '.' TOK_IDENT

    '+'  shift, and go to state 87
    '-'  shift, and go to state 88
    '*'  shift, and go to state 89
    '/'  shift, and go to state 90
    '%'  shift, and go to state 91
    '['  shift, and go to state 93
    '.'  shift, and go to state 94

    '['       [reduce using rule 60 (binop)]
    '.'       [reduce using rule 60 (binop)]
    $default  reduce using rule 60 (binop)


state 120

   53 binop: expr . '+' expr
   54      | expr . '-' expr
   55      | expr . '*' expr
   56      | expr . '/' expr
   57      | expr . '=' expr
   58      | expr . TOK_LT expr
   59      | expr . TOK_GT expr
   59      | expr TOK_GT expr .
   60      | expr . TOK_LE expr
   61      | expr . TOK_GE expr
   62      | expr . '%' expr
   63      | expr . TOK_EQ expr
   64      | expr . TOK_NE expr
   79 variable: expr . '[' expr ']'
   80         | expr . '.' TOK_IDENT

    '+'  shift, and go to state 87
    '-'  shift, and go to state 88
    '*'  shift, and go to state 89
    '/'  shift, and go to state 90
    '%'  shift, and go to state 91
    '['  shift, and go to state 93
    '.'  shift, and go to state 94

    '['       [reduce using rule 59 (binop)]
    '.'       [reduce using rule 59 (binop)]
    $default  reduce using rule 59 (binop)


state 121

   53 binop: expr . '+' expr
   54      | expr . '-' expr
   55      | expr . '*' expr
   56      | expr . '/' expr
   57      | expr . '=' expr
   58      | expr . TOK_LT expr
   59      | expr . TOK_GT expr
   60      | expr . TOK_LE expr
   61      | expr . TOK_GE expr
   61      | expr TOK_GE expr .
   62      | expr . '%' expr
   63      | expr . TOK_EQ expr
   64      | expr . TOK_NE expr
   79 variable: expr . '[' expr ']'
   80         | expr . '.' TOK_IDENT

    '+'  shift, and go to state 87
    '-'  shift, and go to state 88
    '*'  shift, and go to state 89
    '/'  shift, and go to state 90
    '%'  shift, and go to state 91
    '['  shift, and go to state 93
    '.'  shift, and go to state 94

    '['       [reduce using rule 61 (binop)]
    '.'       [reduce using rule 61 (binop)]
    $default  reduce using rule 61 (binop)


state 122

   53 binop: expr . '+' expr
   54      | expr . '-' expr
   55      | expr . '*' expr
   56      | expr . '/' expr
   57      | expr . '=' expr
   57      | expr '=' expr .
   58      | expr . TOK_LT expr
   59      | expr . TOK_GT expr
   60      | expr . TOK_LE expr
   61      | expr . TOK_GE expr
   62      | expr . '%' expr
   63      | expr . TOK_EQ expr
   64      | expr . TOK_NE expr
   79 variable: expr . '[' expr ']'
   80         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 80
    TOK_NE  shift, and go to state 81
    TOK_LT  shift, and go to state 82
    TOK_LE  shift, and go to state 83
    TOK_GT  shift, and go to state 84
    TOK_GE  shift, and go to state 85
    '='     shift, and go to state 86
    '+'     shift, and go to state 87
    '-'     shift, and go to state 88
    '*'     shift, and go to state 89
    '/'     shift, and go to state 90
    '%'     shift, and go to state 91
    '['     shift, and go to state 93
    '.'     shift, and go to state 94

    '['       [reduce using rule 57 (binop)]
    '.'       [reduce using rule 57 (binop)]
    $default  reduce using rule 57 (binop)


state 123

   53 binop: expr . '+' expr
   53      | expr '+' expr .
   54      | expr . '-' expr
   55      | expr . '*' expr
   56      | expr . '/' expr
   57      | expr . '=' expr
   58      | expr . TOK_LT expr
   59      | expr . TOK_GT expr
   60      | expr . TOK_LE expr
   61      | expr . TOK_GE expr
   62      | expr . '%' expr
   63      | expr . TOK_EQ expr
   64      | expr . TOK_NE expr
   79 variable: expr . '[' expr ']'
   80         | expr . '.' TOK_IDENT

    '*'  shift, and go to state 89
    '/'  shift, and go to state 90
    '%'  shift, and go to state 91
    '['  shift, and go to state 93
    '.'  shift, and go to state 94

    '['       [reduce using rule 53 (binop)]
    '.'       [reduce using rule 53 (binop)]
    $default  reduce using rule 53 (binop)


state 124

   53 binop: expr . '+' expr
   54      | expr . '-' expr
   54      | expr '-' expr .
   55      | expr . '*' expr
   56      | expr . '/' expr
   57      | expr . '=' expr
   58      | expr . TOK_LT expr
   59      | expr . TOK_GT expr
   60      | expr . TOK_LE expr
   61      | expr . TOK_GE expr
   62      | expr . '%' expr
   63      | expr . TOK_EQ expr
   64      | expr . TOK_NE expr
   79 variable: expr . '[' expr ']'
   80         | expr . '.' TOK_IDENT

    '*'  shift, and go to state 89
    '/'  shift, and go to state 90
    '%'  shift, and go to state 91
    '['  shift, and go to state 93
    '.'  shift, and go to state 94

    '['       [reduce using rule 54 (binop)]
    '.'       [reduce using rule 54 (binop)]
    $default  reduce using rule 54 (binop)


state 125

   53 binop: expr . '+' expr
   54      | expr . '-' expr
   55      | expr . '*' expr
   55      | expr '*' expr .
   56      | expr . '/' expr
   57      | expr . '=' expr
   58      | expr . TOK_LT expr
   59      | expr . TOK_GT expr
   60      | expr . TOK_LE expr
   61      | expr . TOK_GE expr
   62      | expr . '%' expr
   63      | expr . TOK_EQ expr
   64      | expr . TOK_NE expr
   79 variable: expr . '[' expr ']'
   80         | expr . '.' TOK_IDENT

    '['  shift, and go to state 93
    '.'  shift, and go to state 94

    '['       [reduce using rule 55 (binop)]
    '.'       [reduce using rule 55 (binop)]
    $default  reduce using rule 55 (binop)


state 126

   53 binop: expr . '+' expr
   54      | expr . '-' expr
   55      | expr . '*' expr
   56      | expr . '/' expr
   56      | expr '/' expr .
   57      | expr . '=' expr
   58      | expr . TOK_LT expr
   59      | expr . TOK_GT expr
   60      | expr . TOK_LE expr
   61      | expr . TOK_GE expr
   62      | expr . '%' expr
   63      | expr . TOK_EQ expr
   64      | expr . TOK_NE expr
   79 variable: expr . '[' expr ']'
   80         | expr . '.' TOK_IDENT

    '['  shift, and go to state 93
    '.'  shift, and go to state 94

    '['       [reduce using rule 56 (binop)]
    '.'       [reduce using rule 56 (binop)]
    $default  reduce using rule 56 (binop)


state 127

   53 binop: expr . '+' expr
   54      | expr . '-' expr
   55      | expr . '*' expr
   56      | expr . '/' expr
   57      | expr . '=' expr
   58      | expr . TOK_LT expr
   59      | expr . TOK_GT expr
   60      | expr . TOK_LE expr
   61      | expr . TOK_GE expr
   62      | expr . '%' expr
   62      | expr '%' expr .
   63      | expr . TOK_EQ expr
   64      | expr . TOK_NE expr
   79 variable: expr . '[' expr ']'
   80         | expr . '.' TOK_IDENT

    '['  shift, and go to state 93
    '.'  shift, and go to state 94

    '['       [reduce using rule 62 (binop)]
    '.'       [reduce using rule 62 (binop)]
    $default  reduce using rule 62 (binop)


state 128

   53 binop: expr . '+' expr
   54      | expr . '-' expr
   55      | expr . '*' expr
   56      | expr . '/' expr
   57      | expr . '=' expr
   58      | expr . TOK_LT expr
   59      | expr . TOK_GT expr
   60      | expr . TOK_LE expr
   61      | expr . TOK_GE expr
   62      | expr . '%' expr
   63      | expr . TOK_EQ expr
   64      | expr . TOK_NE expr
   79 variable: expr . '[' expr ']'
   79         | expr '[' expr . ']'
   80         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 80
    TOK_NE  shift, and go to state 81
    TOK_LT  shift, and go to state 82
    TOK_LE  shift, and go to state 83
    TOK_GT  shift, and go to state 84
    TOK_GE  shift, and go to state 85
    '='     shift, and go to state 86
    '+'     shift, and go to state 87
    '-'     shift, and go to state 88
    '*'     shift, and go to state 89
    '/'     shift, and go to state 90
    '%'     shift, and go to state 91
    '['     shift, and go to state 93
    ']'     shift, and go to state 148
    '.'     shift, and go to state 94


state 129

   80 variable: expr '.' TOK_IDENT .

    $default  reduce using rule 80 (variable)


state 130

   53 binop: expr . '+' expr
   54      | expr . '-' expr
   55      | expr . '*' expr
   56      | expr . '/' expr
   57      | expr . '=' expr
   58      | expr . TOK_LT expr
   59      | expr . TOK_GT expr
   60      | expr . TOK_LE expr
   61      | expr . TOK_GE expr
   62      | expr . '%' expr
   63      | expr . TOK_EQ expr
   64      | expr . TOK_NE expr
   75 callexprs: callexprs ',' expr .
   79 variable: expr . '[' expr ']'
   80         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 80
    TOK_NE  shift, and go to state 81
    TOK_LT  shift, and go to state 82
    TOK_LE  shift, and go to state 83
    TOK_GT  shift, and go to state 84
    TOK_GE  shift, and go to state 85
    '='     shift, and go to state 86
    '+'     shift, and go to state 87
    '-'     shift, and go to state 88
    '*'     shift, and go to state 89
    '/'     shift, and go to state 90
    '%'     shift, and go to state 91
    '['     shift, and go to state 93
    '.'     shift, and go to state 94

    $default  reduce using rule 75 (callexprs)


state 131

   43 ifstart: TOK_IF '(' expr ')' .

    $default  reduce using rule 43 (ifstart)


state 132

   40 while: TOK_WHILE '(' expr ')' . statement

    TOK_VOID       shift, and go to state 5
    TOK_BOOL       shift, and go to state 6
    TOK_CHAR       shift, and go to state 7
    TOK_INT        shift, and go to state 8
    TOK_STRING     shift, and go to state 9
    TOK_IF         shift, and go to state 10
    TOK_WHILE      shift, and go to state 11
    TOK_RETURN     shift, and go to state 12
    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 18
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27
    ';'            shift, and go to state 28
    '{'            shift, and go to state 29

    basetype   go to state 31
    identdecl  go to state 70
    blocklist  go to state 34
    block      go to state 35
    statement  go to state 149
    vardecl    go to state 37
    while      go to state 38
    ifelse     go to state 39
    ifstart    go to state 40
    return     go to state 41
    expr       go to state 42
    binop      go to state 43
    unop       go to state 44
    allocator  go to state 45
    callexprs  go to state 46
    call       go to state 47
    variable   go to state 48
    constant   go to state 49


state 133

   11 structdef: TOK_STRUCT TOK_IDENT '{' '}' .

    $default  reduce using rule 11 (structdef)


state 134

    8 fields: '{' fielddecl .

    $default  reduce using rule 8 (fields)


state 135

   12 fielddecl: basetype . TOK_IDENT ';'
   13          | basetype . TOK_ARRAY TOK_IDENT ';'

    TOK_ARRAY  shift, and go to state 150
    TOK_IDENT  shift, and go to state 151


state 136

   10 structdef: TOK_STRUCT TOK_IDENT fields '}' .

    $default  reduce using rule 10 (structdef)


state 137

    9 fields: fields fielddecl .

    $default  reduce using rule 9 (fields)


state 138

   53 binop: expr . '+' expr
   54      | expr . '-' expr
   55      | expr . '*' expr
   56      | expr . '/' expr
   57      | expr . '=' expr
   58      | expr . TOK_LT expr
   59      | expr . TOK_GT expr
   60      | expr . TOK_LE expr
   61      | expr . TOK_GE expr
   62      | expr . '%' expr
   63      | expr . TOK_EQ expr
   64      | expr . TOK_NE expr
   72 allocator: TOK_NEW TOK_STRING '(' expr . ')'
   79 variable: expr . '[' expr ']'
   80         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 80
    TOK_NE  shift, and go to state 81
    TOK_LT  shift, and go to state 82
    TOK_LE  shift, and go to state 83
    TOK_GT  shift, and go to state 84
    TOK_GE  shift, and go to state 85
    '='     shift, and go to state 86
    '+'     shift, and go to state 87
    '-'     shift, and go to state 88
    '*'     shift, and go to state 89
    '/'     shift, and go to state 90
    '%'     shift, and go to state 91
    ')'     shift, and go to state 152
    '['     shift, and go to state 93
    '.'     shift, and go to state 94


state 139

   71 allocator: TOK_NEW TOK_IDENT '(' ')' .
   77 call: TOK_IDENT '(' ')' .

    TOK_EQ    reduce using rule 71 (allocator)
    TOK_EQ    [reduce using rule 77 (call)]
    TOK_NE    reduce using rule 71 (allocator)
    TOK_NE    [reduce using rule 77 (call)]
    TOK_LT    reduce using rule 71 (allocator)
    TOK_LT    [reduce using rule 77 (call)]
    TOK_LE    reduce using rule 71 (allocator)
    TOK_LE    [reduce using rule 77 (call)]
    TOK_GT    reduce using rule 71 (allocator)
    TOK_GT    [reduce using rule 77 (call)]
    TOK_GE    reduce using rule 71 (allocator)
    TOK_GE    [reduce using rule 77 (call)]
    '='       reduce using rule 71 (allocator)
    '='       [reduce using rule 77 (call)]
    '+'       reduce using rule 71 (allocator)
    '+'       [reduce using rule 77 (call)]
    '-'       reduce using rule 71 (allocator)
    '-'       [reduce using rule 77 (call)]
    '*'       reduce using rule 71 (allocator)
    '*'       [reduce using rule 77 (call)]
    '/'       reduce using rule 71 (allocator)
    '/'       [reduce using rule 77 (call)]
    '%'       reduce using rule 71 (allocator)
    '%'       [reduce using rule 77 (call)]
    ')'       reduce using rule 71 (allocator)
    ')'       [reduce using rule 77 (call)]
    ';'       reduce using rule 71 (allocator)
    ';'       [reduce using rule 77 (call)]
    ','       reduce using rule 71 (allocator)
    ','       [reduce using rule 77 (call)]
    '['       reduce using rule 71 (allocator)
    '['       [reduce using rule 77 (call)]
    ']'       reduce using rule 71 (allocator)
    ']'       [reduce using rule 77 (call)]
    '.'       reduce using rule 71 (allocator)
    '.'       [reduce using rule 77 (call)]
    $default  reduce using rule 71 (allocator)


state 140

   53 binop: expr . '+' expr
   54      | expr . '-' expr
   55      | expr . '*' expr
   56      | expr . '/' expr
   57      | expr . '=' expr
   58      | expr . TOK_LT expr
   59      | expr . TOK_GT expr
   60      | expr . TOK_LE expr
   61      | expr . TOK_GE expr
   62      | expr . '%' expr
   63      | expr . TOK_EQ expr
   64      | expr . TOK_NE expr
   73 allocator: TOK_NEW basetype '[' expr . ']'
   79 variable: expr . '[' expr ']'
   80         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 80
    TOK_NE  shift, and go to state 81
    TOK_LT  shift, and go to state 82
    TOK_LE  shift, and go to state 83
    TOK_GT  shift, and go to state 84
    TOK_GE  shift, and go to state 85
    '='     shift, and go to state 86
    '+'     shift, and go to state 87
    '-'     shift, and go to state 88
    '*'     shift, and go to state 89
    '/'     shift, and go to state 90
    '%'     shift, and go to state 91
    '['     shift, and go to state 93
    ']'     shift, and go to state 153
    '.'     shift, and go to state 94


state 141

   39 vardecl: identdecl '=' expr ';' .

    $default  reduce using rule 39 (vardecl)


state 142

   25 function: identdecl '(' ')' ';' .

    $default  reduce using rule 25 (function)


state 143

   24 function: identdecl '(' ')' block .

    $default  reduce using rule 24 (function)


state 144

   23 function: identdecl funchead ')' ';' .

    $default  reduce using rule 23 (function)


state 145

   22 function: identdecl funchead ')' block .

    $default  reduce using rule 22 (function)


state 146

   21 funchead: funchead ',' identdecl .

    $default  reduce using rule 21 (funchead)


state 147

   42 ifelse: ifstart statement TOK_ELSE statement .

    $default  reduce using rule 42 (ifelse)


state 148

   79 variable: expr '[' expr ']' .

    $default  reduce using rule 79 (variable)


state 149

   40 while: TOK_WHILE '(' expr ')' statement .

    $default  reduce using rule 40 (while)


state 150

   13 fielddecl: basetype TOK_ARRAY . TOK_IDENT ';'

    TOK_IDENT  shift, and go to state 154


state 151

   12 fielddecl: basetype TOK_IDENT . ';'

    ';'  shift, and go to state 155


state 152

   72 allocator: TOK_NEW TOK_STRING '(' expr ')' .

    $default  reduce using rule 72 (allocator)


state 153

   73 allocator: TOK_NEW basetype '[' expr ']' .

    $default  reduce using rule 73 (allocator)


state 154

   13 fielddecl: basetype TOK_ARRAY TOK_IDENT . ';'

    ';'  shift, and go to state 156


state 155

   12 fielddecl: basetype TOK_IDENT ';' .

    $default  reduce using rule 12 (fielddecl)


state 156

   13 fielddecl: basetype TOK_ARRAY TOK_IDENT ';' .

    $default  reduce using rule 13 (fielddecl)
